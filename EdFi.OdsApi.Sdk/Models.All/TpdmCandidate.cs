// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmCandidate
    /// </summary>
    [DataContract(Name = "tpdm_candidate")]
    public partial class TpdmCandidate : IEquatable<TpdmCandidate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCandidate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidate" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="candidateIdentifier">A unique alphanumeric code assigned to a candidate. (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="addresses">An unordered collection of candidateAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code..</param>
        /// <param name="birthCity">The city the student was born in..</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (required).</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born..</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth..</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born..</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S..</param>
        /// <param name="disabilities">An unordered collection of candidateDisabilities. The disability condition(s) that best describes an individual&#39;s impairment..</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services..</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy..</param>
        /// <param name="electronicMails">An unordered collection of candidateElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs..</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL)..</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="genderDescriptor">The gender of the candidate..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="languages">An unordered collection of candidateLanguages. The language(s) the individual uses to communicate..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient..</param>
        /// <param name="maidenName">The individual&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.).</param>
        /// <param name="otherNames">An unordered collection of candidateOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of candidatePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual..</param>
        /// <param name="races">An unordered collection of candidateRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="sexDescriptor">The sex of the candidate. (required).</param>
        /// <param name="telephones">An unordered collection of candidateTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmCandidate(string id = default, string candidateIdentifier = default, EdFiPersonReference personReference = default, List<TpdmCandidateAddress> addresses = default, string birthCity = default, string birthCountryDescriptor = default, DateTime birthDate = default, string birthInternationalProvince = default, string birthSexDescriptor = default, string birthStateAbbreviationDescriptor = default, DateTime? dateEnteredUS = default, List<TpdmCandidateDisability> disabilities = default, string displacementStatus = default, bool? economicDisadvantaged = default, List<TpdmCandidateElectronicMail> electronicMails = default, string englishLanguageExamDescriptor = default, bool? firstGenerationStudent = default, string firstName = default, string genderDescriptor = default, string generationCodeSuffix = default, bool? hispanicLatinoEthnicity = default, List<TpdmCandidateLanguage> languages = default, string lastSurname = default, string limitedEnglishProficiencyDescriptor = default, string maidenName = default, string middleName = default, bool? multipleBirthStatus = default, List<TpdmCandidateOtherName> otherNames = default, List<TpdmCandidatePersonalIdentificationDocument> personalIdentificationDocuments = default, string personalTitlePrefix = default, List<TpdmCandidateRace> races = default, string sexDescriptor = default, List<TpdmCandidateTelephone> telephones = default, string etag = default)
        {
            CandidateIdentifier = candidateIdentifier ?? throw new ArgumentNullException("candidateIdentifier is a required property for TpdmCandidate and cannot be null");
            BirthDate = birthDate;
            FirstName = firstName ?? throw new ArgumentNullException("firstName is a required property for TpdmCandidate and cannot be null");
            LastSurname = lastSurname ?? throw new ArgumentNullException("lastSurname is a required property for TpdmCandidate and cannot be null");
            SexDescriptor = sexDescriptor ?? throw new ArgumentNullException("sexDescriptor is a required property for TpdmCandidate and cannot be null");
            Id = id;
            PersonReference = personReference;
            Addresses = addresses;
            BirthCity = birthCity;
            BirthCountryDescriptor = birthCountryDescriptor;
            BirthInternationalProvince = birthInternationalProvince;
            BirthSexDescriptor = birthSexDescriptor;
            BirthStateAbbreviationDescriptor = birthStateAbbreviationDescriptor;
            DateEnteredUS = dateEnteredUS;
            Disabilities = disabilities;
            DisplacementStatus = displacementStatus;
            EconomicDisadvantaged = economicDisadvantaged;
            ElectronicMails = electronicMails;
            EnglishLanguageExamDescriptor = englishLanguageExamDescriptor;
            FirstGenerationStudent = firstGenerationStudent;
            GenderDescriptor = genderDescriptor;
            GenerationCodeSuffix = generationCodeSuffix;
            HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            Languages = languages;
            LimitedEnglishProficiencyDescriptor = limitedEnglishProficiencyDescriptor;
            MaidenName = maidenName;
            MiddleName = middleName;
            MultipleBirthStatus = multipleBirthStatus;
            OtherNames = otherNames;
            PersonalIdentificationDocuments = personalIdentificationDocuments;
            PersonalTitlePrefix = personalTitlePrefix;
            Races = races;
            Telephones = telephones;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a candidate.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a candidate.</value>
        [DataMember(Name = "candidateIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string CandidateIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name = "personReference", EmitDefaultValue = false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// An unordered collection of candidateAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of candidateAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<TpdmCandidateAddress> Addresses { get; set; }

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        /// <value>The city the student was born in.</value>
        [DataMember(Name = "birthCity", EmitDefaultValue = true)]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [DataMember(Name = "birthCountryDescriptor", EmitDefaultValue = true)]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name = "birthDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        /// <value>For students born outside of the U.S., the Province or jurisdiction in which an individual is born.</value>
        [DataMember(Name = "birthInternationalProvince", EmitDefaultValue = true)]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person&#39;s gender at birth.
        /// </summary>
        /// <value>A person&#39;s gender at birth.</value>
        [DataMember(Name = "birthSexDescriptor", EmitDefaultValue = true)]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.</value>
        [DataMember(Name = "birthStateAbbreviationDescriptor", EmitDefaultValue = true)]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        /// <value>For students born outside of the U.S., the date the student entered the U.S.</value>
        [DataMember(Name = "dateEnteredUS", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// An unordered collection of candidateDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.
        /// </summary>
        /// <value>An unordered collection of candidateDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.</value>
        [DataMember(Name = "disabilities", EmitDefaultValue = false)]
        public List<TpdmCandidateDisability> Disabilities { get; set; }

        /// <summary>
        /// Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
        /// </summary>
        /// <value>Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.</value>
        [DataMember(Name = "displacementStatus", EmitDefaultValue = true)]
        public string DisplacementStatus { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        /// <value>An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.</value>
        [DataMember(Name = "economicDisadvantaged", EmitDefaultValue = true)]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// An unordered collection of candidateElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of candidateElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name = "electronicMails", EmitDefaultValue = false)]
        public List<TpdmCandidateElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).
        /// </summary>
        /// <value>Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).</value>
        [DataMember(Name = "englishLanguageExamDescriptor", EmitDefaultValue = true)]
        public string EnglishLanguageExamDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        /// <value>Indicator of whether individual is a first generation college student.</value>
        [DataMember(Name = "firstGenerationStudent", EmitDefaultValue = true)]
        public bool? FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender of the candidate.
        /// </summary>
        /// <value>The gender of the candidate.</value>
        [DataMember(Name = "genderDescriptor", EmitDefaultValue = true)]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name = "generationCodeSuffix", EmitDefaultValue = true)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name = "hispanicLatinoEthnicity", EmitDefaultValue = true)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of candidateLanguages. The language(s) the individual uses to communicate.
        /// </summary>
        /// <value>An unordered collection of candidateLanguages. The language(s) the individual uses to communicate.</value>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<TpdmCandidateLanguage> Languages { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        /// </summary>
        /// <value>An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.</value>
        [DataMember(Name = "limitedEnglishProficiencyDescriptor", EmitDefaultValue = true)]
        public string LimitedEnglishProficiencyDescriptor { get; set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [DataMember(Name = "maidenName", EmitDefaultValue = true)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        /// <value>Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)</value>
        [DataMember(Name = "multipleBirthStatus", EmitDefaultValue = true)]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// An unordered collection of candidateOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of candidateOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [DataMember(Name = "otherNames", EmitDefaultValue = false)]
        public List<TpdmCandidateOtherName> OtherNames { get; set; }

        /// <summary>
        /// An unordered collection of candidatePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of candidatePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name = "personalIdentificationDocuments", EmitDefaultValue = false)]
        public List<TpdmCandidatePersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [DataMember(Name = "personalTitlePrefix", EmitDefaultValue = true)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// An unordered collection of candidateRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of candidateRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name = "races", EmitDefaultValue = false)]
        public List<TpdmCandidateRace> Races { get; set; }

        /// <summary>
        /// The sex of the candidate.
        /// </summary>
        /// <value>The sex of the candidate.</value>
        [DataMember(Name = "sexDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of candidateTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of candidateTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name = "telephones", EmitDefaultValue = false)]
        public List<TpdmCandidateTelephone> Telephones { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmCandidate {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  CandidateIdentifier: ").Append(CandidateIdentifier).Append("\n");
            _ = sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            _ = sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            _ = sb.Append("  BirthCity: ").Append(BirthCity).Append("\n");
            _ = sb.Append("  BirthCountryDescriptor: ").Append(BirthCountryDescriptor).Append("\n");
            _ = sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            _ = sb.Append("  BirthInternationalProvince: ").Append(BirthInternationalProvince).Append("\n");
            _ = sb.Append("  BirthSexDescriptor: ").Append(BirthSexDescriptor).Append("\n");
            _ = sb.Append("  BirthStateAbbreviationDescriptor: ").Append(BirthStateAbbreviationDescriptor).Append("\n");
            _ = sb.Append("  DateEnteredUS: ").Append(DateEnteredUS).Append("\n");
            _ = sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            _ = sb.Append("  DisplacementStatus: ").Append(DisplacementStatus).Append("\n");
            _ = sb.Append("  EconomicDisadvantaged: ").Append(EconomicDisadvantaged).Append("\n");
            _ = sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            _ = sb.Append("  EnglishLanguageExamDescriptor: ").Append(EnglishLanguageExamDescriptor).Append("\n");
            _ = sb.Append("  FirstGenerationStudent: ").Append(FirstGenerationStudent).Append("\n");
            _ = sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            _ = sb.Append("  GenderDescriptor: ").Append(GenderDescriptor).Append("\n");
            _ = sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            _ = sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            _ = sb.Append("  Languages: ").Append(Languages).Append("\n");
            _ = sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            _ = sb.Append("  LimitedEnglishProficiencyDescriptor: ").Append(LimitedEnglishProficiencyDescriptor).Append("\n");
            _ = sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            _ = sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            _ = sb.Append("  MultipleBirthStatus: ").Append(MultipleBirthStatus).Append("\n");
            _ = sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            _ = sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            _ = sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            _ = sb.Append("  Races: ").Append(Races).Append("\n");
            _ = sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            _ = sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmCandidate);
        }

        /// <summary>
        /// Returns true if TpdmCandidate instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCandidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCandidate input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    CandidateIdentifier == input.CandidateIdentifier ||
                    (CandidateIdentifier != null &&
                    CandidateIdentifier.Equals(input.CandidateIdentifier))
                ) &&
                (
                    PersonReference == input.PersonReference ||
                    (PersonReference != null &&
                    PersonReference.Equals(input.PersonReference))
                ) &&
                (
                    Addresses == input.Addresses ||
                    Addresses != null &&
                    input.Addresses != null &&
                    Addresses.SequenceEqual(input.Addresses)
                ) &&
                (
                    BirthCity == input.BirthCity ||
                    (BirthCity != null &&
                    BirthCity.Equals(input.BirthCity))
                ) &&
                (
                    BirthCountryDescriptor == input.BirthCountryDescriptor ||
                    (BirthCountryDescriptor != null &&
                    BirthCountryDescriptor.Equals(input.BirthCountryDescriptor))
                ) &&
                (
                    BirthDate == input.BirthDate ||
                    BirthDate.Equals(input.BirthDate)
                ) &&
                (
                    BirthInternationalProvince == input.BirthInternationalProvince ||
                    (BirthInternationalProvince != null &&
                    BirthInternationalProvince.Equals(input.BirthInternationalProvince))
                ) &&
                (
                    BirthSexDescriptor == input.BirthSexDescriptor ||
                    (BirthSexDescriptor != null &&
                    BirthSexDescriptor.Equals(input.BirthSexDescriptor))
                ) &&
                (
                    BirthStateAbbreviationDescriptor == input.BirthStateAbbreviationDescriptor ||
                    (BirthStateAbbreviationDescriptor != null &&
                    BirthStateAbbreviationDescriptor.Equals(input.BirthStateAbbreviationDescriptor))
                ) &&
                (
                    DateEnteredUS == input.DateEnteredUS ||
                    (DateEnteredUS != null &&
                    DateEnteredUS.Equals(input.DateEnteredUS))
                ) &&
                (
                    Disabilities == input.Disabilities ||
                    Disabilities != null &&
                    input.Disabilities != null &&
                    Disabilities.SequenceEqual(input.Disabilities)
                ) &&
                (
                    DisplacementStatus == input.DisplacementStatus ||
                    (DisplacementStatus != null &&
                    DisplacementStatus.Equals(input.DisplacementStatus))
                ) &&
                (
                    EconomicDisadvantaged == input.EconomicDisadvantaged ||
                    (EconomicDisadvantaged != null &&
                    EconomicDisadvantaged.Equals(input.EconomicDisadvantaged))
                ) &&
                (
                    ElectronicMails == input.ElectronicMails ||
                    ElectronicMails != null &&
                    input.ElectronicMails != null &&
                    ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) &&
                (
                    EnglishLanguageExamDescriptor == input.EnglishLanguageExamDescriptor ||
                    (EnglishLanguageExamDescriptor != null &&
                    EnglishLanguageExamDescriptor.Equals(input.EnglishLanguageExamDescriptor))
                ) &&
                (
                    FirstGenerationStudent == input.FirstGenerationStudent ||
                    (FirstGenerationStudent != null &&
                    FirstGenerationStudent.Equals(input.FirstGenerationStudent))
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                    FirstName.Equals(input.FirstName))
                ) &&
                (
                    GenderDescriptor == input.GenderDescriptor ||
                    (GenderDescriptor != null &&
                    GenderDescriptor.Equals(input.GenderDescriptor))
                ) &&
                (
                    GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (GenerationCodeSuffix != null &&
                    GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) &&
                (
                    HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (HispanicLatinoEthnicity != null &&
                    HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) &&
                (
                    Languages == input.Languages ||
                    Languages != null &&
                    input.Languages != null &&
                    Languages.SequenceEqual(input.Languages)
                ) &&
                (
                    LastSurname == input.LastSurname ||
                    (LastSurname != null &&
                    LastSurname.Equals(input.LastSurname))
                ) &&
                (
                    LimitedEnglishProficiencyDescriptor == input.LimitedEnglishProficiencyDescriptor ||
                    (LimitedEnglishProficiencyDescriptor != null &&
                    LimitedEnglishProficiencyDescriptor.Equals(input.LimitedEnglishProficiencyDescriptor))
                ) &&
                (
                    MaidenName == input.MaidenName ||
                    (MaidenName != null &&
                    MaidenName.Equals(input.MaidenName))
                ) &&
                (
                    MiddleName == input.MiddleName ||
                    (MiddleName != null &&
                    MiddleName.Equals(input.MiddleName))
                ) &&
                (
                    MultipleBirthStatus == input.MultipleBirthStatus ||
                    (MultipleBirthStatus != null &&
                    MultipleBirthStatus.Equals(input.MultipleBirthStatus))
                ) &&
                (
                    OtherNames == input.OtherNames ||
                    OtherNames != null &&
                    input.OtherNames != null &&
                    OtherNames.SequenceEqual(input.OtherNames)
                ) &&
                (
                    PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    PersonalIdentificationDocuments != null &&
                    input.PersonalIdentificationDocuments != null &&
                    PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) &&
                (
                    PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (PersonalTitlePrefix != null &&
                    PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) &&
                (
                    Races == input.Races ||
                    Races != null &&
                    input.Races != null &&
                    Races.SequenceEqual(input.Races)
                ) &&
                (
                    SexDescriptor == input.SexDescriptor ||
                    (SexDescriptor != null &&
                    SexDescriptor.Equals(input.SexDescriptor))
                ) &&
                (
                    Telephones == input.Telephones ||
                    Telephones != null &&
                    input.Telephones != null &&
                    Telephones.SequenceEqual(input.Telephones)
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                if (CandidateIdentifier != null)
                {
                    hashCode = (hashCode * 59) + CandidateIdentifier.GetHashCode();
                }
                if (PersonReference != null)
                {
                    hashCode = (hashCode * 59) + PersonReference.GetHashCode();
                }
                if (Addresses != null)
                {
                    hashCode = (hashCode * 59) + Addresses.GetHashCode();
                }
                if (BirthCity != null)
                {
                    hashCode = (hashCode * 59) + BirthCity.GetHashCode();
                }
                if (BirthCountryDescriptor != null)
                {
                    hashCode = (hashCode * 59) + BirthCountryDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + BirthDate.GetHashCode();
                if (BirthInternationalProvince != null)
                {
                    hashCode = (hashCode * 59) + BirthInternationalProvince.GetHashCode();
                }
                if (BirthSexDescriptor != null)
                {
                    hashCode = (hashCode * 59) + BirthSexDescriptor.GetHashCode();
                }
                if (BirthStateAbbreviationDescriptor != null)
                {
                    hashCode = (hashCode * 59) + BirthStateAbbreviationDescriptor.GetHashCode();
                }
                if (DateEnteredUS != null)
                {
                    hashCode = (hashCode * 59) + DateEnteredUS.GetHashCode();
                }
                if (Disabilities != null)
                {
                    hashCode = (hashCode * 59) + Disabilities.GetHashCode();
                }
                if (DisplacementStatus != null)
                {
                    hashCode = (hashCode * 59) + DisplacementStatus.GetHashCode();
                }
                if (EconomicDisadvantaged != null)
                {
                    hashCode = (hashCode * 59) + EconomicDisadvantaged.GetHashCode();
                }
                if (ElectronicMails != null)
                {
                    hashCode = (hashCode * 59) + ElectronicMails.GetHashCode();
                }
                if (EnglishLanguageExamDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EnglishLanguageExamDescriptor.GetHashCode();
                }
                if (FirstGenerationStudent != null)
                {
                    hashCode = (hashCode * 59) + FirstGenerationStudent.GetHashCode();
                }
                if (FirstName != null)
                {
                    hashCode = (hashCode * 59) + FirstName.GetHashCode();
                }
                if (GenderDescriptor != null)
                {
                    hashCode = (hashCode * 59) + GenderDescriptor.GetHashCode();
                }
                if (GenerationCodeSuffix != null)
                {
                    hashCode = (hashCode * 59) + GenerationCodeSuffix.GetHashCode();
                }
                if (HispanicLatinoEthnicity != null)
                {
                    hashCode = (hashCode * 59) + HispanicLatinoEthnicity.GetHashCode();
                }
                if (Languages != null)
                {
                    hashCode = (hashCode * 59) + Languages.GetHashCode();
                }
                if (LastSurname != null)
                {
                    hashCode = (hashCode * 59) + LastSurname.GetHashCode();
                }
                if (LimitedEnglishProficiencyDescriptor != null)
                {
                    hashCode = (hashCode * 59) + LimitedEnglishProficiencyDescriptor.GetHashCode();
                }
                if (MaidenName != null)
                {
                    hashCode = (hashCode * 59) + MaidenName.GetHashCode();
                }
                if (MiddleName != null)
                {
                    hashCode = (hashCode * 59) + MiddleName.GetHashCode();
                }
                if (MultipleBirthStatus != null)
                {
                    hashCode = (hashCode * 59) + MultipleBirthStatus.GetHashCode();
                }
                if (OtherNames != null)
                {
                    hashCode = (hashCode * 59) + OtherNames.GetHashCode();
                }
                if (PersonalIdentificationDocuments != null)
                {
                    hashCode = (hashCode * 59) + PersonalIdentificationDocuments.GetHashCode();
                }
                if (PersonalTitlePrefix != null)
                {
                    hashCode = (hashCode * 59) + PersonalTitlePrefix.GetHashCode();
                }
                if (Races != null)
                {
                    hashCode = (hashCode * 59) + Races.GetHashCode();
                }
                if (SexDescriptor != null)
                {
                    hashCode = (hashCode * 59) + SexDescriptor.GetHashCode();
                }
                if (Telephones != null)
                {
                    hashCode = (hashCode * 59) + Telephones.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CandidateIdentifier (string) maxLength
            if (CandidateIdentifier != null && CandidateIdentifier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CandidateIdentifier, length must be less than 32.", new[] { "CandidateIdentifier" });
            }

            // BirthCity (string) maxLength
            if (BirthCity != null && BirthCity.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthCity, length must be less than 30.", new[] { "BirthCity" });
            }

            // BirthCountryDescriptor (string) maxLength
            if (BirthCountryDescriptor != null && BirthCountryDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthCountryDescriptor, length must be less than 306.", new[] { "BirthCountryDescriptor" });
            }

            // BirthInternationalProvince (string) maxLength
            if (BirthInternationalProvince != null && BirthInternationalProvince.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthInternationalProvince, length must be less than 150.", new[] { "BirthInternationalProvince" });
            }

            // BirthSexDescriptor (string) maxLength
            if (BirthSexDescriptor != null && BirthSexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthSexDescriptor, length must be less than 306.", new[] { "BirthSexDescriptor" });
            }

            // BirthStateAbbreviationDescriptor (string) maxLength
            if (BirthStateAbbreviationDescriptor != null && BirthStateAbbreviationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthStateAbbreviationDescriptor, length must be less than 306.", new[] { "BirthStateAbbreviationDescriptor" });
            }

            // DisplacementStatus (string) maxLength
            if (DisplacementStatus != null && DisplacementStatus.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplacementStatus, length must be less than 30.", new[] { "DisplacementStatus" });
            }

            // EnglishLanguageExamDescriptor (string) maxLength
            if (EnglishLanguageExamDescriptor != null && EnglishLanguageExamDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnglishLanguageExamDescriptor, length must be less than 306.", new[] { "EnglishLanguageExamDescriptor" });
            }

            // FirstName (string) maxLength
            if (FirstName != null && FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new[] { "FirstName" });
            }

            // GenderDescriptor (string) maxLength
            if (GenderDescriptor != null && GenderDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenderDescriptor, length must be less than 306.", new[] { "GenderDescriptor" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (GenerationCodeSuffix != null && GenerationCodeSuffix.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new[] { "GenerationCodeSuffix" });
            }

            // LastSurname (string) maxLength
            if (LastSurname != null && LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new[] { "LastSurname" });
            }

            // LimitedEnglishProficiencyDescriptor (string) maxLength
            if (LimitedEnglishProficiencyDescriptor != null && LimitedEnglishProficiencyDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LimitedEnglishProficiencyDescriptor, length must be less than 306.", new[] { "LimitedEnglishProficiencyDescriptor" });
            }

            // MaidenName (string) maxLength
            if (MaidenName != null && MaidenName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaidenName, length must be less than 75.", new[] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (MiddleName != null && MiddleName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, length must be less than 75.", new[] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (PersonalTitlePrefix != null && PersonalTitlePrefix.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new[] { "PersonalTitlePrefix" });
            }

            // SexDescriptor (string) maxLength
            if (SexDescriptor != null && SexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new[] { "SexDescriptor" });
            }

            yield break;
        }
    }

}
