// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStudentOtherName
    /// </summary>
    [DataContract(Name = "edFi_studentOtherName")]
    public partial class EdFiStudentOtherName : IEquatable<EdFiStudentOtherName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentOtherName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentOtherName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentOtherName" /> class.
        /// </summary>
        /// <param name="otherNameTypeDescriptor">The types of alternate names for an individual. (required).</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual..</param>
        public EdFiStudentOtherName(string otherNameTypeDescriptor = default, string firstName = default, string generationCodeSuffix = default, string lastSurname = default, string middleName = default, string personalTitlePrefix = default)
        {
            OtherNameTypeDescriptor = otherNameTypeDescriptor ?? throw new ArgumentNullException("otherNameTypeDescriptor is a required property for EdFiStudentOtherName and cannot be null");
            FirstName = firstName ?? throw new ArgumentNullException("firstName is a required property for EdFiStudentOtherName and cannot be null");
            LastSurname = lastSurname ?? throw new ArgumentNullException("lastSurname is a required property for EdFiStudentOtherName and cannot be null");
            GenerationCodeSuffix = generationCodeSuffix;
            MiddleName = middleName;
            PersonalTitlePrefix = personalTitlePrefix;
        }

        /// <summary>
        /// The types of alternate names for an individual.
        /// </summary>
        /// <value>The types of alternate names for an individual.</value>
        [DataMember(Name = "otherNameTypeDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string OtherNameTypeDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name = "generationCodeSuffix", EmitDefaultValue = true)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [DataMember(Name = "personalTitlePrefix", EmitDefaultValue = true)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class EdFiStudentOtherName {\n");
            _ = sb.Append("  OtherNameTypeDescriptor: ").Append(OtherNameTypeDescriptor).Append("\n");
            _ = sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            _ = sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            _ = sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            _ = sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            _ = sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EdFiStudentOtherName);
        }

        /// <summary>
        /// Returns true if EdFiStudentOtherName instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentOtherName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentOtherName input)
        {
            return input != null
&& (
                    OtherNameTypeDescriptor == input.OtherNameTypeDescriptor ||
                    (OtherNameTypeDescriptor != null &&
                    OtherNameTypeDescriptor.Equals(input.OtherNameTypeDescriptor))
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                    FirstName.Equals(input.FirstName))
                ) &&
                (
                    GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (GenerationCodeSuffix != null &&
                    GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) &&
                (
                    LastSurname == input.LastSurname ||
                    (LastSurname != null &&
                    LastSurname.Equals(input.LastSurname))
                ) &&
                (
                    MiddleName == input.MiddleName ||
                    (MiddleName != null &&
                    MiddleName.Equals(input.MiddleName))
                ) &&
                (
                    PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (PersonalTitlePrefix != null &&
                    PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (OtherNameTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + OtherNameTypeDescriptor.GetHashCode();
                }
                if (FirstName != null)
                {
                    hashCode = (hashCode * 59) + FirstName.GetHashCode();
                }
                if (GenerationCodeSuffix != null)
                {
                    hashCode = (hashCode * 59) + GenerationCodeSuffix.GetHashCode();
                }
                if (LastSurname != null)
                {
                    hashCode = (hashCode * 59) + LastSurname.GetHashCode();
                }
                if (MiddleName != null)
                {
                    hashCode = (hashCode * 59) + MiddleName.GetHashCode();
                }
                if (PersonalTitlePrefix != null)
                {
                    hashCode = (hashCode * 59) + PersonalTitlePrefix.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OtherNameTypeDescriptor (string) maxLength
            if (OtherNameTypeDescriptor != null && OtherNameTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherNameTypeDescriptor, length must be less than 306.", new[] { "OtherNameTypeDescriptor" });
            }

            // FirstName (string) maxLength
            if (FirstName != null && FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new[] { "FirstName" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (GenerationCodeSuffix != null && GenerationCodeSuffix.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new[] { "GenerationCodeSuffix" });
            }

            // LastSurname (string) maxLength
            if (LastSurname != null && LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new[] { "LastSurname" });
            }

            // MiddleName (string) maxLength
            if (MiddleName != null && MiddleName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, length must be less than 75.", new[] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (PersonalTitlePrefix != null && PersonalTitlePrefix.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new[] { "PersonalTitlePrefix" });
            }

            yield break;
        }
    }

}
