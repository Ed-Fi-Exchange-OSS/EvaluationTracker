// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmPerformanceEvaluationRatingLevel
    /// </summary>
    [DataContract(Name = "tpdm_performanceEvaluationRatingLevel")]
    public partial class TpdmPerformanceEvaluationRatingLevel : IEquatable<TpdmPerformanceEvaluationRatingLevel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluationRatingLevel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmPerformanceEvaluationRatingLevel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluationRatingLevel" /> class.
        /// </summary>
        /// <param name="evaluationRatingLevelDescriptor">The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable). (required).</param>
        /// <param name="maxRating">The maximum numerical rating or score to achieve the evaluation rating level..</param>
        /// <param name="minRating">The minimum numerical rating or score to achieve the evaluation rating level..</param>
        public TpdmPerformanceEvaluationRatingLevel(string evaluationRatingLevelDescriptor = default, double? maxRating = default, double? minRating = default)
        {
            EvaluationRatingLevelDescriptor = evaluationRatingLevelDescriptor ?? throw new ArgumentNullException("evaluationRatingLevelDescriptor is a required property for TpdmPerformanceEvaluationRatingLevel and cannot be null");
            MaxRating = maxRating;
            MinRating = minRating;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        /// <value>The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).</value>
        [DataMember(Name = "evaluationRatingLevelDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string EvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        /// <value>The maximum numerical rating or score to achieve the evaluation rating level.</value>
        [DataMember(Name = "maxRating", EmitDefaultValue = true)]
        public double? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        /// <value>The minimum numerical rating or score to achieve the evaluation rating level.</value>
        [DataMember(Name = "minRating", EmitDefaultValue = true)]
        public double? MinRating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmPerformanceEvaluationRatingLevel {\n");
            _ = sb.Append("  EvaluationRatingLevelDescriptor: ").Append(EvaluationRatingLevelDescriptor).Append("\n");
            _ = sb.Append("  MaxRating: ").Append(MaxRating).Append("\n");
            _ = sb.Append("  MinRating: ").Append(MinRating).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmPerformanceEvaluationRatingLevel);
        }

        /// <summary>
        /// Returns true if TpdmPerformanceEvaluationRatingLevel instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmPerformanceEvaluationRatingLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmPerformanceEvaluationRatingLevel input)
        {
            return input != null
&& (
                    EvaluationRatingLevelDescriptor == input.EvaluationRatingLevelDescriptor ||
                    (EvaluationRatingLevelDescriptor != null &&
                    EvaluationRatingLevelDescriptor.Equals(input.EvaluationRatingLevelDescriptor))
                ) &&
                (
                    MaxRating == input.MaxRating ||
                    (MaxRating != null &&
                    MaxRating.Equals(input.MaxRating))
                ) &&
                (
                    MinRating == input.MinRating ||
                    (MinRating != null &&
                    MinRating.Equals(input.MinRating))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (EvaluationRatingLevelDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EvaluationRatingLevelDescriptor.GetHashCode();
                }
                if (MaxRating != null)
                {
                    hashCode = (hashCode * 59) + MaxRating.GetHashCode();
                }
                if (MinRating != null)
                {
                    hashCode = (hashCode * 59) + MinRating.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EvaluationRatingLevelDescriptor (string) maxLength
            if (EvaluationRatingLevelDescriptor != null && EvaluationRatingLevelDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationRatingLevelDescriptor, length must be less than 306.", new[] { "EvaluationRatingLevelDescriptor" });
            }

            yield break;
        }
    }

}
