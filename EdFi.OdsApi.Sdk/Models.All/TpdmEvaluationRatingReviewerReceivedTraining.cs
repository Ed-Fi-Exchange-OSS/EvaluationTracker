// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmEvaluationRatingReviewerReceivedTraining
    /// </summary>
    [DataContract(Name = "tpdm_evaluationRatingReviewerReceivedTraining")]
    public partial class TpdmEvaluationRatingReviewerReceivedTraining : IEquatable<TpdmEvaluationRatingReviewerReceivedTraining>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationRatingReviewerReceivedTraining" /> class.
        /// </summary>
        /// <param name="interRaterReliabilityScore">A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100).</param>
        /// <param name="receivedTrainingDate">The date on which the person administering the performance meausre received training on how to conduct performance measures..</param>
        public TpdmEvaluationRatingReviewerReceivedTraining(int? interRaterReliabilityScore = default, DateTime? receivedTrainingDate = default)
        {
            InterRaterReliabilityScore = interRaterReliabilityScore;
            ReceivedTrainingDate = receivedTrainingDate;
        }

        /// <summary>
        /// A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)
        /// </summary>
        /// <value>A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)</value>
        [DataMember(Name = "interRaterReliabilityScore", EmitDefaultValue = true)]
        public int? InterRaterReliabilityScore { get; set; }

        /// <summary>
        /// The date on which the person administering the performance meausre received training on how to conduct performance measures.
        /// </summary>
        /// <value>The date on which the person administering the performance meausre received training on how to conduct performance measures.</value>
        [DataMember(Name = "receivedTrainingDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ReceivedTrainingDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmEvaluationRatingReviewerReceivedTraining {\n");
            _ = sb.Append("  InterRaterReliabilityScore: ").Append(InterRaterReliabilityScore).Append("\n");
            _ = sb.Append("  ReceivedTrainingDate: ").Append(ReceivedTrainingDate).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmEvaluationRatingReviewerReceivedTraining);
        }

        /// <summary>
        /// Returns true if TpdmEvaluationRatingReviewerReceivedTraining instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEvaluationRatingReviewerReceivedTraining to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEvaluationRatingReviewerReceivedTraining input)
        {
            return input != null
&& (
                    InterRaterReliabilityScore == input.InterRaterReliabilityScore ||
                    (InterRaterReliabilityScore != null &&
                    InterRaterReliabilityScore.Equals(input.InterRaterReliabilityScore))
                ) &&
                (
                    ReceivedTrainingDate == input.ReceivedTrainingDate ||
                    (ReceivedTrainingDate != null &&
                    ReceivedTrainingDate.Equals(input.ReceivedTrainingDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (InterRaterReliabilityScore != null)
                {
                    hashCode = (hashCode * 59) + InterRaterReliabilityScore.GetHashCode();
                }
                if (ReceivedTrainingDate != null)
                {
                    hashCode = (hashCode * 59) + ReceivedTrainingDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
