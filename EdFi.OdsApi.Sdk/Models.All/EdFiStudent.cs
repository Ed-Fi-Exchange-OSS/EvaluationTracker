// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStudent
    /// </summary>
    [DataContract(Name = "edFi_student")]
    public partial class EdFiStudent : IEquatable<EdFiStudent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="birthCity">The city the student was born in..</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (required).</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born..</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth..</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born..</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen..</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="identificationDocuments">An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="maidenName">The individual&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.).</param>
        /// <param name="otherNames">An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual..</param>
        /// <param name="visas">An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStudent(string id = default, string studentUniqueId = default, EdFiPersonReference personReference = default, string birthCity = default, string birthCountryDescriptor = default, DateTime birthDate = default, string birthInternationalProvince = default, string birthSexDescriptor = default, string birthStateAbbreviationDescriptor = default, string citizenshipStatusDescriptor = default, DateTime? dateEnteredUS = default, string firstName = default, string generationCodeSuffix = default, List<EdFiStudentIdentificationDocument> identificationDocuments = default, string lastSurname = default, string maidenName = default, string middleName = default, bool? multipleBirthStatus = default, List<EdFiStudentOtherName> otherNames = default, List<EdFiStudentPersonalIdentificationDocument> personalIdentificationDocuments = default, string personalTitlePrefix = default, List<EdFiStudentVisa> visas = default, string etag = default)
        {
            StudentUniqueId = studentUniqueId ?? throw new ArgumentNullException("studentUniqueId is a required property for EdFiStudent and cannot be null");
            BirthDate = birthDate;
            FirstName = firstName ?? throw new ArgumentNullException("firstName is a required property for EdFiStudent and cannot be null");
            LastSurname = lastSurname ?? throw new ArgumentNullException("lastSurname is a required property for EdFiStudent and cannot be null");
            Id = id;
            PersonReference = personReference;
            BirthCity = birthCity;
            BirthCountryDescriptor = birthCountryDescriptor;
            BirthInternationalProvince = birthInternationalProvince;
            BirthSexDescriptor = birthSexDescriptor;
            BirthStateAbbreviationDescriptor = birthStateAbbreviationDescriptor;
            CitizenshipStatusDescriptor = citizenshipStatusDescriptor;
            DateEnteredUS = dateEnteredUS;
            GenerationCodeSuffix = generationCodeSuffix;
            IdentificationDocuments = identificationDocuments;
            MaidenName = maidenName;
            MiddleName = middleName;
            MultipleBirthStatus = multipleBirthStatus;
            OtherNames = otherNames;
            PersonalIdentificationDocuments = personalIdentificationDocuments;
            PersonalTitlePrefix = personalTitlePrefix;
            Visas = visas;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [DataMember(Name = "studentUniqueId", IsRequired = true, EmitDefaultValue = false)]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name = "personReference", EmitDefaultValue = false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        /// <value>The city the student was born in.</value>
        [DataMember(Name = "birthCity", EmitDefaultValue = true)]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [DataMember(Name = "birthCountryDescriptor", EmitDefaultValue = true)]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name = "birthDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        /// <value>For students born outside of the U.S., the Province or jurisdiction in which an individual is born.</value>
        [DataMember(Name = "birthInternationalProvince", EmitDefaultValue = true)]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person&#39;s gender at birth.
        /// </summary>
        /// <value>A person&#39;s gender at birth.</value>
        [DataMember(Name = "birthSexDescriptor", EmitDefaultValue = true)]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.</value>
        [DataMember(Name = "birthStateAbbreviationDescriptor", EmitDefaultValue = true)]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [DataMember(Name = "citizenshipStatusDescriptor", EmitDefaultValue = true)]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        /// <value>For students born outside of the U.S., the date the student entered the U.S.</value>
        [DataMember(Name = "dateEnteredUS", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name = "generationCodeSuffix", EmitDefaultValue = true)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.</value>
        [DataMember(Name = "identificationDocuments", EmitDefaultValue = false)]
        public List<EdFiStudentIdentificationDocument> IdentificationDocuments { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [DataMember(Name = "maidenName", EmitDefaultValue = true)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        /// <value>Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)</value>
        [DataMember(Name = "multipleBirthStatus", EmitDefaultValue = true)]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [DataMember(Name = "otherNames", EmitDefaultValue = false)]
        public List<EdFiStudentOtherName> OtherNames { get; set; }

        /// <summary>
        /// An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name = "personalIdentificationDocuments", EmitDefaultValue = false)]
        public List<EdFiStudentPersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [DataMember(Name = "personalTitlePrefix", EmitDefaultValue = true)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [DataMember(Name = "visas", EmitDefaultValue = false)]
        public List<EdFiStudentVisa> Visas { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class EdFiStudent {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            _ = sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            _ = sb.Append("  BirthCity: ").Append(BirthCity).Append("\n");
            _ = sb.Append("  BirthCountryDescriptor: ").Append(BirthCountryDescriptor).Append("\n");
            _ = sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            _ = sb.Append("  BirthInternationalProvince: ").Append(BirthInternationalProvince).Append("\n");
            _ = sb.Append("  BirthSexDescriptor: ").Append(BirthSexDescriptor).Append("\n");
            _ = sb.Append("  BirthStateAbbreviationDescriptor: ").Append(BirthStateAbbreviationDescriptor).Append("\n");
            _ = sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            _ = sb.Append("  DateEnteredUS: ").Append(DateEnteredUS).Append("\n");
            _ = sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            _ = sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            _ = sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            _ = sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            _ = sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            _ = sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            _ = sb.Append("  MultipleBirthStatus: ").Append(MultipleBirthStatus).Append("\n");
            _ = sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            _ = sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            _ = sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            _ = sb.Append("  Visas: ").Append(Visas).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EdFiStudent);
        }

        /// <summary>
        /// Returns true if EdFiStudent instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudent input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    StudentUniqueId == input.StudentUniqueId ||
                    (StudentUniqueId != null &&
                    StudentUniqueId.Equals(input.StudentUniqueId))
                ) &&
                (
                    PersonReference == input.PersonReference ||
                    (PersonReference != null &&
                    PersonReference.Equals(input.PersonReference))
                ) &&
                (
                    BirthCity == input.BirthCity ||
                    (BirthCity != null &&
                    BirthCity.Equals(input.BirthCity))
                ) &&
                (
                    BirthCountryDescriptor == input.BirthCountryDescriptor ||
                    (BirthCountryDescriptor != null &&
                    BirthCountryDescriptor.Equals(input.BirthCountryDescriptor))
                ) &&
                (
                    BirthDate == input.BirthDate ||
                    BirthDate.Equals(input.BirthDate)
                ) &&
                (
                    BirthInternationalProvince == input.BirthInternationalProvince ||
                    (BirthInternationalProvince != null &&
                    BirthInternationalProvince.Equals(input.BirthInternationalProvince))
                ) &&
                (
                    BirthSexDescriptor == input.BirthSexDescriptor ||
                    (BirthSexDescriptor != null &&
                    BirthSexDescriptor.Equals(input.BirthSexDescriptor))
                ) &&
                (
                    BirthStateAbbreviationDescriptor == input.BirthStateAbbreviationDescriptor ||
                    (BirthStateAbbreviationDescriptor != null &&
                    BirthStateAbbreviationDescriptor.Equals(input.BirthStateAbbreviationDescriptor))
                ) &&
                (
                    CitizenshipStatusDescriptor == input.CitizenshipStatusDescriptor ||
                    (CitizenshipStatusDescriptor != null &&
                    CitizenshipStatusDescriptor.Equals(input.CitizenshipStatusDescriptor))
                ) &&
                (
                    DateEnteredUS == input.DateEnteredUS ||
                    (DateEnteredUS != null &&
                    DateEnteredUS.Equals(input.DateEnteredUS))
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                    FirstName.Equals(input.FirstName))
                ) &&
                (
                    GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (GenerationCodeSuffix != null &&
                    GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) &&
                (
                    IdentificationDocuments == input.IdentificationDocuments ||
                    IdentificationDocuments != null &&
                    input.IdentificationDocuments != null &&
                    IdentificationDocuments.SequenceEqual(input.IdentificationDocuments)
                ) &&
                (
                    LastSurname == input.LastSurname ||
                    (LastSurname != null &&
                    LastSurname.Equals(input.LastSurname))
                ) &&
                (
                    MaidenName == input.MaidenName ||
                    (MaidenName != null &&
                    MaidenName.Equals(input.MaidenName))
                ) &&
                (
                    MiddleName == input.MiddleName ||
                    (MiddleName != null &&
                    MiddleName.Equals(input.MiddleName))
                ) &&
                (
                    MultipleBirthStatus == input.MultipleBirthStatus ||
                    (MultipleBirthStatus != null &&
                    MultipleBirthStatus.Equals(input.MultipleBirthStatus))
                ) &&
                (
                    OtherNames == input.OtherNames ||
                    OtherNames != null &&
                    input.OtherNames != null &&
                    OtherNames.SequenceEqual(input.OtherNames)
                ) &&
                (
                    PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    PersonalIdentificationDocuments != null &&
                    input.PersonalIdentificationDocuments != null &&
                    PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) &&
                (
                    PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (PersonalTitlePrefix != null &&
                    PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) &&
                (
                    Visas == input.Visas ||
                    Visas != null &&
                    input.Visas != null &&
                    Visas.SequenceEqual(input.Visas)
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                if (StudentUniqueId != null)
                {
                    hashCode = (hashCode * 59) + StudentUniqueId.GetHashCode();
                }
                if (PersonReference != null)
                {
                    hashCode = (hashCode * 59) + PersonReference.GetHashCode();
                }
                if (BirthCity != null)
                {
                    hashCode = (hashCode * 59) + BirthCity.GetHashCode();
                }
                if (BirthCountryDescriptor != null)
                {
                    hashCode = (hashCode * 59) + BirthCountryDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + BirthDate.GetHashCode();
                if (BirthInternationalProvince != null)
                {
                    hashCode = (hashCode * 59) + BirthInternationalProvince.GetHashCode();
                }
                if (BirthSexDescriptor != null)
                {
                    hashCode = (hashCode * 59) + BirthSexDescriptor.GetHashCode();
                }
                if (BirthStateAbbreviationDescriptor != null)
                {
                    hashCode = (hashCode * 59) + BirthStateAbbreviationDescriptor.GetHashCode();
                }
                if (CitizenshipStatusDescriptor != null)
                {
                    hashCode = (hashCode * 59) + CitizenshipStatusDescriptor.GetHashCode();
                }
                if (DateEnteredUS != null)
                {
                    hashCode = (hashCode * 59) + DateEnteredUS.GetHashCode();
                }
                if (FirstName != null)
                {
                    hashCode = (hashCode * 59) + FirstName.GetHashCode();
                }
                if (GenerationCodeSuffix != null)
                {
                    hashCode = (hashCode * 59) + GenerationCodeSuffix.GetHashCode();
                }
                if (IdentificationDocuments != null)
                {
                    hashCode = (hashCode * 59) + IdentificationDocuments.GetHashCode();
                }
                if (LastSurname != null)
                {
                    hashCode = (hashCode * 59) + LastSurname.GetHashCode();
                }
                if (MaidenName != null)
                {
                    hashCode = (hashCode * 59) + MaidenName.GetHashCode();
                }
                if (MiddleName != null)
                {
                    hashCode = (hashCode * 59) + MiddleName.GetHashCode();
                }
                if (MultipleBirthStatus != null)
                {
                    hashCode = (hashCode * 59) + MultipleBirthStatus.GetHashCode();
                }
                if (OtherNames != null)
                {
                    hashCode = (hashCode * 59) + OtherNames.GetHashCode();
                }
                if (PersonalIdentificationDocuments != null)
                {
                    hashCode = (hashCode * 59) + PersonalIdentificationDocuments.GetHashCode();
                }
                if (PersonalTitlePrefix != null)
                {
                    hashCode = (hashCode * 59) + PersonalTitlePrefix.GetHashCode();
                }
                if (Visas != null)
                {
                    hashCode = (hashCode * 59) + Visas.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StudentUniqueId (string) maxLength
            if (StudentUniqueId != null && StudentUniqueId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new[] { "StudentUniqueId" });
            }

            // BirthCity (string) maxLength
            if (BirthCity != null && BirthCity.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthCity, length must be less than 30.", new[] { "BirthCity" });
            }

            // BirthCountryDescriptor (string) maxLength
            if (BirthCountryDescriptor != null && BirthCountryDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthCountryDescriptor, length must be less than 306.", new[] { "BirthCountryDescriptor" });
            }

            // BirthInternationalProvince (string) maxLength
            if (BirthInternationalProvince != null && BirthInternationalProvince.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthInternationalProvince, length must be less than 150.", new[] { "BirthInternationalProvince" });
            }

            // BirthSexDescriptor (string) maxLength
            if (BirthSexDescriptor != null && BirthSexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthSexDescriptor, length must be less than 306.", new[] { "BirthSexDescriptor" });
            }

            // BirthStateAbbreviationDescriptor (string) maxLength
            if (BirthStateAbbreviationDescriptor != null && BirthStateAbbreviationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthStateAbbreviationDescriptor, length must be less than 306.", new[] { "BirthStateAbbreviationDescriptor" });
            }

            // CitizenshipStatusDescriptor (string) maxLength
            if (CitizenshipStatusDescriptor != null && CitizenshipStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CitizenshipStatusDescriptor, length must be less than 306.", new[] { "CitizenshipStatusDescriptor" });
            }

            // FirstName (string) maxLength
            if (FirstName != null && FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new[] { "FirstName" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (GenerationCodeSuffix != null && GenerationCodeSuffix.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new[] { "GenerationCodeSuffix" });
            }

            // LastSurname (string) maxLength
            if (LastSurname != null && LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new[] { "LastSurname" });
            }

            // MaidenName (string) maxLength
            if (MaidenName != null && MaidenName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaidenName, length must be less than 75.", new[] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (MiddleName != null && MiddleName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, length must be less than 75.", new[] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (PersonalTitlePrefix != null && PersonalTitlePrefix.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new[] { "PersonalTitlePrefix" });
            }

            yield break;
        }
    }

}
