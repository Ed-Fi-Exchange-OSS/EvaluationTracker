// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmCandidateElectronicMail
    /// </summary>
    [DataContract(Name = "tpdm_candidateElectronicMail")]
    public partial class TpdmCandidateElectronicMail : IEquatable<TpdmCandidateElectronicMail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateElectronicMail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCandidateElectronicMail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateElectronicMail" /> class.
        /// </summary>
        /// <param name="electronicMailTypeDescriptor">The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.) (required).</param>
        /// <param name="electronicMailAddress">The electronic mail (e-mail) address listed for an individual or organization. (required).</param>
        /// <param name="doNotPublishIndicator">An indication that the electronic email address should not be published..</param>
        /// <param name="primaryEmailAddressIndicator">An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization..</param>
        public TpdmCandidateElectronicMail(string electronicMailTypeDescriptor = default, string electronicMailAddress = default, bool? doNotPublishIndicator = default, bool? primaryEmailAddressIndicator = default)
        {
            ElectronicMailTypeDescriptor = electronicMailTypeDescriptor ?? throw new ArgumentNullException("electronicMailTypeDescriptor is a required property for TpdmCandidateElectronicMail and cannot be null");
            ElectronicMailAddress = electronicMailAddress ?? throw new ArgumentNullException("electronicMailAddress is a required property for TpdmCandidateElectronicMail and cannot be null");
            DoNotPublishIndicator = doNotPublishIndicator;
            PrimaryEmailAddressIndicator = primaryEmailAddressIndicator;
        }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        /// <value>The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)</value>
        [DataMember(Name = "electronicMailTypeDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string ElectronicMailTypeDescriptor { get; set; }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        /// <value>The electronic mail (e-mail) address listed for an individual or organization.</value>
        [DataMember(Name = "electronicMailAddress", IsRequired = true, EmitDefaultValue = false)]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        /// <value>An indication that the electronic email address should not be published.</value>
        [DataMember(Name = "doNotPublishIndicator", EmitDefaultValue = true)]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        /// <value>An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.</value>
        [DataMember(Name = "primaryEmailAddressIndicator", EmitDefaultValue = true)]
        public bool? PrimaryEmailAddressIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmCandidateElectronicMail {\n");
            _ = sb.Append("  ElectronicMailTypeDescriptor: ").Append(ElectronicMailTypeDescriptor).Append("\n");
            _ = sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            _ = sb.Append("  DoNotPublishIndicator: ").Append(DoNotPublishIndicator).Append("\n");
            _ = sb.Append("  PrimaryEmailAddressIndicator: ").Append(PrimaryEmailAddressIndicator).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmCandidateElectronicMail);
        }

        /// <summary>
        /// Returns true if TpdmCandidateElectronicMail instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCandidateElectronicMail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCandidateElectronicMail input)
        {
            return input != null
&& (
                    ElectronicMailTypeDescriptor == input.ElectronicMailTypeDescriptor ||
                    (ElectronicMailTypeDescriptor != null &&
                    ElectronicMailTypeDescriptor.Equals(input.ElectronicMailTypeDescriptor))
                ) &&
                (
                    ElectronicMailAddress == input.ElectronicMailAddress ||
                    (ElectronicMailAddress != null &&
                    ElectronicMailAddress.Equals(input.ElectronicMailAddress))
                ) &&
                (
                    DoNotPublishIndicator == input.DoNotPublishIndicator ||
                    (DoNotPublishIndicator != null &&
                    DoNotPublishIndicator.Equals(input.DoNotPublishIndicator))
                ) &&
                (
                    PrimaryEmailAddressIndicator == input.PrimaryEmailAddressIndicator ||
                    (PrimaryEmailAddressIndicator != null &&
                    PrimaryEmailAddressIndicator.Equals(input.PrimaryEmailAddressIndicator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ElectronicMailTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + ElectronicMailTypeDescriptor.GetHashCode();
                }
                if (ElectronicMailAddress != null)
                {
                    hashCode = (hashCode * 59) + ElectronicMailAddress.GetHashCode();
                }
                if (DoNotPublishIndicator != null)
                {
                    hashCode = (hashCode * 59) + DoNotPublishIndicator.GetHashCode();
                }
                if (PrimaryEmailAddressIndicator != null)
                {
                    hashCode = (hashCode * 59) + PrimaryEmailAddressIndicator.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ElectronicMailTypeDescriptor (string) maxLength
            if (ElectronicMailTypeDescriptor != null && ElectronicMailTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ElectronicMailTypeDescriptor, length must be less than 306.", new[] { "ElectronicMailTypeDescriptor" });
            }

            // ElectronicMailAddress (string) maxLength
            if (ElectronicMailAddress != null && ElectronicMailAddress.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new[] { "ElectronicMailAddress" });
            }

            yield break;
        }
    }

}
