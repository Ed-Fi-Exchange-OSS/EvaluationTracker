// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmCandidateEducatorPreparationProgramAssociation
    /// </summary>
    [DataContract(Name = "tpdm_candidateEducatorPreparationProgramAssociation")]
    public partial class TpdmCandidateEducatorPreparationProgramAssociation : IEquatable<TpdmCandidateEducatorPreparationProgramAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateEducatorPreparationProgramAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCandidateEducatorPreparationProgramAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateEducatorPreparationProgramAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">The begin date for the association. (required).</param>
        /// <param name="candidateReference">candidateReference (required).</param>
        /// <param name="educatorPreparationProgramReference">educatorPreparationProgramReference (required).</param>
        /// <param name="cohortYears">An unordered collection of candidateEducatorPreparationProgramAssociationCohortYears. The type and year of a cohort the student belongs to as determined by the year that student entered a specific grade..</param>
        /// <param name="degreeSpecializations">An unordered collection of candidateEducatorPreparationProgramAssociationDegreeSpecializations. Information around the area(s) of specialization for an individual..</param>
        /// <param name="endDate">The end date for the association..</param>
        /// <param name="eppProgramPathwayDescriptor">The program pathway the candidate is following; for example: Residency, Internship, Traditional.</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmCandidateEducatorPreparationProgramAssociation(string id = default, DateTime beginDate = default, TpdmCandidateReference candidateReference = default, TpdmEducatorPreparationProgramReference educatorPreparationProgramReference = default, List<TpdmCandidateEducatorPreparationProgramAssociationCohortYear> cohortYears = default, List<TpdmCandidateEducatorPreparationProgramAssociationDegreeSpecialization> degreeSpecializations = default, DateTime? endDate = default, string eppProgramPathwayDescriptor = default, string reasonExitedDescriptor = default, string etag = default)
        {
            BeginDate = beginDate;
            CandidateReference = candidateReference ?? throw new ArgumentNullException("candidateReference is a required property for TpdmCandidateEducatorPreparationProgramAssociation and cannot be null");
            EducatorPreparationProgramReference = educatorPreparationProgramReference ?? throw new ArgumentNullException("educatorPreparationProgramReference is a required property for TpdmCandidateEducatorPreparationProgramAssociation and cannot be null");
            Id = id;
            CohortYears = cohortYears;
            DegreeSpecializations = degreeSpecializations;
            EndDate = endDate;
            EppProgramPathwayDescriptor = eppProgramPathwayDescriptor;
            ReasonExitedDescriptor = reasonExitedDescriptor;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The begin date for the association.
        /// </summary>
        /// <value>The begin date for the association.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets CandidateReference
        /// </summary>
        [DataMember(Name = "candidateReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmCandidateReference CandidateReference { get; set; }

        /// <summary>
        /// Gets or Sets EducatorPreparationProgramReference
        /// </summary>
        [DataMember(Name = "educatorPreparationProgramReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmEducatorPreparationProgramReference EducatorPreparationProgramReference { get; set; }

        /// <summary>
        /// An unordered collection of candidateEducatorPreparationProgramAssociationCohortYears. The type and year of a cohort the student belongs to as determined by the year that student entered a specific grade.
        /// </summary>
        /// <value>An unordered collection of candidateEducatorPreparationProgramAssociationCohortYears. The type and year of a cohort the student belongs to as determined by the year that student entered a specific grade.</value>
        [DataMember(Name = "cohortYears", EmitDefaultValue = false)]
        public List<TpdmCandidateEducatorPreparationProgramAssociationCohortYear> CohortYears { get; set; }

        /// <summary>
        /// An unordered collection of candidateEducatorPreparationProgramAssociationDegreeSpecializations. Information around the area(s) of specialization for an individual.
        /// </summary>
        /// <value>An unordered collection of candidateEducatorPreparationProgramAssociationDegreeSpecializations. Information around the area(s) of specialization for an individual.</value>
        [DataMember(Name = "degreeSpecializations", EmitDefaultValue = false)]
        public List<TpdmCandidateEducatorPreparationProgramAssociationDegreeSpecialization> DegreeSpecializations { get; set; }

        /// <summary>
        /// The end date for the association.
        /// </summary>
        /// <value>The end date for the association.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The program pathway the candidate is following; for example: Residency, Internship, Traditional
        /// </summary>
        /// <value>The program pathway the candidate is following; for example: Residency, Internship, Traditional</value>
        [DataMember(Name = "eppProgramPathwayDescriptor", EmitDefaultValue = true)]
        public string EppProgramPathwayDescriptor { get; set; }

        /// <summary>
        /// Reason exited for the association.
        /// </summary>
        /// <value>Reason exited for the association.</value>
        [DataMember(Name = "reasonExitedDescriptor", EmitDefaultValue = true)]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmCandidateEducatorPreparationProgramAssociation {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            _ = sb.Append("  CandidateReference: ").Append(CandidateReference).Append("\n");
            _ = sb.Append("  EducatorPreparationProgramReference: ").Append(EducatorPreparationProgramReference).Append("\n");
            _ = sb.Append("  CohortYears: ").Append(CohortYears).Append("\n");
            _ = sb.Append("  DegreeSpecializations: ").Append(DegreeSpecializations).Append("\n");
            _ = sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            _ = sb.Append("  EppProgramPathwayDescriptor: ").Append(EppProgramPathwayDescriptor).Append("\n");
            _ = sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmCandidateEducatorPreparationProgramAssociation);
        }

        /// <summary>
        /// Returns true if TpdmCandidateEducatorPreparationProgramAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCandidateEducatorPreparationProgramAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCandidateEducatorPreparationProgramAssociation input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    BeginDate == input.BeginDate ||
                    BeginDate.Equals(input.BeginDate)
                ) &&
                (
                    CandidateReference == input.CandidateReference ||
                    (CandidateReference != null &&
                    CandidateReference.Equals(input.CandidateReference))
                ) &&
                (
                    EducatorPreparationProgramReference == input.EducatorPreparationProgramReference ||
                    (EducatorPreparationProgramReference != null &&
                    EducatorPreparationProgramReference.Equals(input.EducatorPreparationProgramReference))
                ) &&
                (
                    CohortYears == input.CohortYears ||
                    CohortYears != null &&
                    input.CohortYears != null &&
                    CohortYears.SequenceEqual(input.CohortYears)
                ) &&
                (
                    DegreeSpecializations == input.DegreeSpecializations ||
                    DegreeSpecializations != null &&
                    input.DegreeSpecializations != null &&
                    DegreeSpecializations.SequenceEqual(input.DegreeSpecializations)
                ) &&
                (
                    EndDate == input.EndDate ||
                    (EndDate != null &&
                    EndDate.Equals(input.EndDate))
                ) &&
                (
                    EppProgramPathwayDescriptor == input.EppProgramPathwayDescriptor ||
                    (EppProgramPathwayDescriptor != null &&
                    EppProgramPathwayDescriptor.Equals(input.EppProgramPathwayDescriptor))
                ) &&
                (
                    ReasonExitedDescriptor == input.ReasonExitedDescriptor ||
                    (ReasonExitedDescriptor != null &&
                    ReasonExitedDescriptor.Equals(input.ReasonExitedDescriptor))
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + BeginDate.GetHashCode();
                if (CandidateReference != null)
                {
                    hashCode = (hashCode * 59) + CandidateReference.GetHashCode();
                }
                if (EducatorPreparationProgramReference != null)
                {
                    hashCode = (hashCode * 59) + EducatorPreparationProgramReference.GetHashCode();
                }
                if (CohortYears != null)
                {
                    hashCode = (hashCode * 59) + CohortYears.GetHashCode();
                }
                if (DegreeSpecializations != null)
                {
                    hashCode = (hashCode * 59) + DegreeSpecializations.GetHashCode();
                }
                if (EndDate != null)
                {
                    hashCode = (hashCode * 59) + EndDate.GetHashCode();
                }
                if (EppProgramPathwayDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EppProgramPathwayDescriptor.GetHashCode();
                }
                if (ReasonExitedDescriptor != null)
                {
                    hashCode = (hashCode * 59) + ReasonExitedDescriptor.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EppProgramPathwayDescriptor (string) maxLength
            if (EppProgramPathwayDescriptor != null && EppProgramPathwayDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EppProgramPathwayDescriptor, length must be less than 306.", new[] { "EppProgramPathwayDescriptor" });
            }

            // ReasonExitedDescriptor (string) maxLength
            if (ReasonExitedDescriptor != null && ReasonExitedDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReasonExitedDescriptor, length must be less than 306.", new[] { "ReasonExitedDescriptor" });
            }

            yield break;
        }
    }

}
