// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmEvaluationRating
    /// </summary>
    [DataContract(Name = "tpdm_evaluationRating")]
    public partial class TpdmEvaluationRating : IEquatable<TpdmEvaluationRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmEvaluationRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationRating" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationDate">The date for the person&#39;s evaluation. (required).</param>
        /// <param name="evaluationReference">evaluationReference (required).</param>
        /// <param name="performanceEvaluationRatingReference">performanceEvaluationRatingReference (required).</param>
        /// <param name="sectionReference">sectionReference.</param>
        /// <param name="evaluationRatingLevelDescriptor">The rating level achieved based upon the rating or score..</param>
        /// <param name="evaluationRatingStatusDescriptor">The Status of the poerformance evaluation..</param>
        /// <param name="results">An unordered collection of evaluationRatingResults. The numerical summary rating or score for the evaluation..</param>
        /// <param name="reviewers">An unordered collection of evaluationRatingReviewers. The person(s) that conducted the performance evaluation..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmEvaluationRating(string id = default, DateTime evaluationDate = default, TpdmEvaluationReference evaluationReference = default, TpdmPerformanceEvaluationRatingReference performanceEvaluationRatingReference = default, EdFiSectionReference sectionReference = default, string evaluationRatingLevelDescriptor = default, string evaluationRatingStatusDescriptor = default, List<TpdmEvaluationRatingResult> results = default, List<TpdmEvaluationRatingReviewer> reviewers = default, string etag = default)
        {
            EvaluationDate = evaluationDate;
            EvaluationReference = evaluationReference ?? throw new ArgumentNullException("evaluationReference is a required property for TpdmEvaluationRating and cannot be null");
            PerformanceEvaluationRatingReference = performanceEvaluationRatingReference ?? throw new ArgumentNullException("performanceEvaluationRatingReference is a required property for TpdmEvaluationRating and cannot be null");
            Id = id;
            SectionReference = sectionReference;
            EvaluationRatingLevelDescriptor = evaluationRatingLevelDescriptor;
            EvaluationRatingStatusDescriptor = evaluationRatingStatusDescriptor;
            Results = results;
            Reviewers = reviewers;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The date for the person&#39;s evaluation.
        /// </summary>
        /// <value>The date for the person&#39;s evaluation.</value>
        [DataMember(Name = "evaluationDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime EvaluationDate { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationReference
        /// </summary>
        [DataMember(Name = "evaluationReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmEvaluationReference EvaluationReference { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceEvaluationRatingReference
        /// </summary>
        [DataMember(Name = "performanceEvaluationRatingReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmPerformanceEvaluationRatingReference PerformanceEvaluationRatingReference { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name = "sectionReference", EmitDefaultValue = false)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        /// <value>The rating level achieved based upon the rating or score.</value>
        [DataMember(Name = "evaluationRatingLevelDescriptor", EmitDefaultValue = true)]
        public string EvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// The Status of the poerformance evaluation.
        /// </summary>
        /// <value>The Status of the poerformance evaluation.</value>
        [DataMember(Name = "evaluationRatingStatusDescriptor", EmitDefaultValue = true)]
        public string EvaluationRatingStatusDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of evaluationRatingResults. The numerical summary rating or score for the evaluation.
        /// </summary>
        /// <value>An unordered collection of evaluationRatingResults. The numerical summary rating or score for the evaluation.</value>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<TpdmEvaluationRatingResult> Results { get; set; }

        /// <summary>
        /// An unordered collection of evaluationRatingReviewers. The person(s) that conducted the performance evaluation.
        /// </summary>
        /// <value>An unordered collection of evaluationRatingReviewers. The person(s) that conducted the performance evaluation.</value>
        [DataMember(Name = "reviewers", EmitDefaultValue = false)]
        public List<TpdmEvaluationRatingReviewer> Reviewers { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmEvaluationRating {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  EvaluationDate: ").Append(EvaluationDate).Append("\n");
            _ = sb.Append("  EvaluationReference: ").Append(EvaluationReference).Append("\n");
            _ = sb.Append("  PerformanceEvaluationRatingReference: ").Append(PerformanceEvaluationRatingReference).Append("\n");
            _ = sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            _ = sb.Append("  EvaluationRatingLevelDescriptor: ").Append(EvaluationRatingLevelDescriptor).Append("\n");
            _ = sb.Append("  EvaluationRatingStatusDescriptor: ").Append(EvaluationRatingStatusDescriptor).Append("\n");
            _ = sb.Append("  Results: ").Append(Results).Append("\n");
            _ = sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmEvaluationRating);
        }

        /// <summary>
        /// Returns true if TpdmEvaluationRating instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEvaluationRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEvaluationRating input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    EvaluationDate == input.EvaluationDate ||
                    EvaluationDate.Equals(input.EvaluationDate)
                ) &&
                (
                    EvaluationReference == input.EvaluationReference ||
                    (EvaluationReference != null &&
                    EvaluationReference.Equals(input.EvaluationReference))
                ) &&
                (
                    PerformanceEvaluationRatingReference == input.PerformanceEvaluationRatingReference ||
                    (PerformanceEvaluationRatingReference != null &&
                    PerformanceEvaluationRatingReference.Equals(input.PerformanceEvaluationRatingReference))
                ) &&
                (
                    SectionReference == input.SectionReference ||
                    (SectionReference != null &&
                    SectionReference.Equals(input.SectionReference))
                ) &&
                (
                    EvaluationRatingLevelDescriptor == input.EvaluationRatingLevelDescriptor ||
                    (EvaluationRatingLevelDescriptor != null &&
                    EvaluationRatingLevelDescriptor.Equals(input.EvaluationRatingLevelDescriptor))
                ) &&
                (
                    EvaluationRatingStatusDescriptor == input.EvaluationRatingStatusDescriptor ||
                    (EvaluationRatingStatusDescriptor != null &&
                    EvaluationRatingStatusDescriptor.Equals(input.EvaluationRatingStatusDescriptor))
                ) &&
                (
                    Results == input.Results ||
                    Results != null &&
                    input.Results != null &&
                    Results.SequenceEqual(input.Results)
                ) &&
                (
                    Reviewers == input.Reviewers ||
                    Reviewers != null &&
                    input.Reviewers != null &&
                    Reviewers.SequenceEqual(input.Reviewers)
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + EvaluationDate.GetHashCode();
                if (EvaluationReference != null)
                {
                    hashCode = (hashCode * 59) + EvaluationReference.GetHashCode();
                }
                if (PerformanceEvaluationRatingReference != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationRatingReference.GetHashCode();
                }
                if (SectionReference != null)
                {
                    hashCode = (hashCode * 59) + SectionReference.GetHashCode();
                }
                if (EvaluationRatingLevelDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EvaluationRatingLevelDescriptor.GetHashCode();
                }
                if (EvaluationRatingStatusDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EvaluationRatingStatusDescriptor.GetHashCode();
                }
                if (Results != null)
                {
                    hashCode = (hashCode * 59) + Results.GetHashCode();
                }
                if (Reviewers != null)
                {
                    hashCode = (hashCode * 59) + Reviewers.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EvaluationRatingLevelDescriptor (string) maxLength
            if (EvaluationRatingLevelDescriptor != null && EvaluationRatingLevelDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationRatingLevelDescriptor, length must be less than 306.", new[] { "EvaluationRatingLevelDescriptor" });
            }

            // EvaluationRatingStatusDescriptor (string) maxLength
            if (EvaluationRatingStatusDescriptor != null && EvaluationRatingStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationRatingStatusDescriptor, length must be less than 306.", new[] { "EvaluationRatingStatusDescriptor" });
            }

            yield break;
        }
    }

}
