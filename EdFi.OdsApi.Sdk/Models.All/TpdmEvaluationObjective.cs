// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmEvaluationObjective
    /// </summary>
    [DataContract(Name = "tpdm_evaluationObjective")]
    public partial class TpdmEvaluationObjective : IEquatable<TpdmEvaluationObjective>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationObjective" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmEvaluationObjective() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationObjective" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (required).</param>
        /// <param name="evaluationReference">evaluationReference (required).</param>
        /// <param name="evaluationObjectiveDescription">The long description of the Evaluation Objective..</param>
        /// <param name="evaluationTypeDescriptor">The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth)..</param>
        /// <param name="maxRating">The maximum summary numerical rating or score for the evaluation Objective..</param>
        /// <param name="minRating">The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0..</param>
        /// <param name="ratingLevels">An unordered collection of evaluationObjectiveRatingLevels. The descriptive level(s) of ratings (cut scores) for evaluation Objective..</param>
        /// <param name="sortOrder">The sort order of this Evaluation Objective..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmEvaluationObjective(string id = default, string evaluationObjectiveTitle = default, TpdmEvaluationReference evaluationReference = default, string evaluationObjectiveDescription = default, string evaluationTypeDescriptor = default, double? maxRating = default, double? minRating = default, List<TpdmEvaluationObjectiveRatingLevel> ratingLevels = default, int? sortOrder = default, string etag = default)
        {
            EvaluationObjectiveTitle = evaluationObjectiveTitle ?? throw new ArgumentNullException("evaluationObjectiveTitle is a required property for TpdmEvaluationObjective and cannot be null");
            EvaluationReference = evaluationReference ?? throw new ArgumentNullException("evaluationReference is a required property for TpdmEvaluationObjective and cannot be null");
            Id = id;
            EvaluationObjectiveDescription = evaluationObjectiveDescription;
            EvaluationTypeDescriptor = evaluationTypeDescriptor;
            MaxRating = maxRating;
            MinRating = minRating;
            RatingLevels = ratingLevels;
            SortOrder = sortOrder;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        /// <value>The name or title of the evaluation Objective.</value>
        [DataMember(Name = "evaluationObjectiveTitle", IsRequired = true, EmitDefaultValue = false)]
        public string EvaluationObjectiveTitle { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationReference
        /// </summary>
        [DataMember(Name = "evaluationReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmEvaluationReference EvaluationReference { get; set; }

        /// <summary>
        /// The long description of the Evaluation Objective.
        /// </summary>
        /// <value>The long description of the Evaluation Objective.</value>
        [DataMember(Name = "evaluationObjectiveDescription", EmitDefaultValue = true)]
        public string EvaluationObjectiveDescription { get; set; }

        /// <summary>
        /// The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth).
        /// </summary>
        /// <value>The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth).</value>
        [DataMember(Name = "evaluationTypeDescriptor", EmitDefaultValue = true)]
        public string EvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the evaluation Objective.
        /// </summary>
        /// <value>The maximum summary numerical rating or score for the evaluation Objective.</value>
        [DataMember(Name = "maxRating", EmitDefaultValue = true)]
        public double? MaxRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0.
        /// </summary>
        /// <value>The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0.</value>
        [DataMember(Name = "minRating", EmitDefaultValue = true)]
        public double? MinRating { get; set; }

        /// <summary>
        /// An unordered collection of evaluationObjectiveRatingLevels. The descriptive level(s) of ratings (cut scores) for evaluation Objective.
        /// </summary>
        /// <value>An unordered collection of evaluationObjectiveRatingLevels. The descriptive level(s) of ratings (cut scores) for evaluation Objective.</value>
        [DataMember(Name = "ratingLevels", EmitDefaultValue = false)]
        public List<TpdmEvaluationObjectiveRatingLevel> RatingLevels { get; set; }

        /// <summary>
        /// The sort order of this Evaluation Objective.
        /// </summary>
        /// <value>The sort order of this Evaluation Objective.</value>
        [DataMember(Name = "sortOrder", EmitDefaultValue = true)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmEvaluationObjective {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  EvaluationObjectiveTitle: ").Append(EvaluationObjectiveTitle).Append("\n");
            _ = sb.Append("  EvaluationReference: ").Append(EvaluationReference).Append("\n");
            _ = sb.Append("  EvaluationObjectiveDescription: ").Append(EvaluationObjectiveDescription).Append("\n");
            _ = sb.Append("  EvaluationTypeDescriptor: ").Append(EvaluationTypeDescriptor).Append("\n");
            _ = sb.Append("  MaxRating: ").Append(MaxRating).Append("\n");
            _ = sb.Append("  MinRating: ").Append(MinRating).Append("\n");
            _ = sb.Append("  RatingLevels: ").Append(RatingLevels).Append("\n");
            _ = sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmEvaluationObjective);
        }

        /// <summary>
        /// Returns true if TpdmEvaluationObjective instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEvaluationObjective to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEvaluationObjective input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    EvaluationObjectiveTitle == input.EvaluationObjectiveTitle ||
                    (EvaluationObjectiveTitle != null &&
                    EvaluationObjectiveTitle.Equals(input.EvaluationObjectiveTitle))
                ) &&
                (
                    EvaluationReference == input.EvaluationReference ||
                    (EvaluationReference != null &&
                    EvaluationReference.Equals(input.EvaluationReference))
                ) &&
                (
                    EvaluationObjectiveDescription == input.EvaluationObjectiveDescription ||
                    (EvaluationObjectiveDescription != null &&
                    EvaluationObjectiveDescription.Equals(input.EvaluationObjectiveDescription))
                ) &&
                (
                    EvaluationTypeDescriptor == input.EvaluationTypeDescriptor ||
                    (EvaluationTypeDescriptor != null &&
                    EvaluationTypeDescriptor.Equals(input.EvaluationTypeDescriptor))
                ) &&
                (
                    MaxRating == input.MaxRating ||
                    (MaxRating != null &&
                    MaxRating.Equals(input.MaxRating))
                ) &&
                (
                    MinRating == input.MinRating ||
                    (MinRating != null &&
                    MinRating.Equals(input.MinRating))
                ) &&
                (
                    RatingLevels == input.RatingLevels ||
                    RatingLevels != null &&
                    input.RatingLevels != null &&
                    RatingLevels.SequenceEqual(input.RatingLevels)
                ) &&
                (
                    SortOrder == input.SortOrder ||
                    (SortOrder != null &&
                    SortOrder.Equals(input.SortOrder))
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                if (EvaluationObjectiveTitle != null)
                {
                    hashCode = (hashCode * 59) + EvaluationObjectiveTitle.GetHashCode();
                }
                if (EvaluationReference != null)
                {
                    hashCode = (hashCode * 59) + EvaluationReference.GetHashCode();
                }
                if (EvaluationObjectiveDescription != null)
                {
                    hashCode = (hashCode * 59) + EvaluationObjectiveDescription.GetHashCode();
                }
                if (EvaluationTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EvaluationTypeDescriptor.GetHashCode();
                }
                if (MaxRating != null)
                {
                    hashCode = (hashCode * 59) + MaxRating.GetHashCode();
                }
                if (MinRating != null)
                {
                    hashCode = (hashCode * 59) + MinRating.GetHashCode();
                }
                if (RatingLevels != null)
                {
                    hashCode = (hashCode * 59) + RatingLevels.GetHashCode();
                }
                if (SortOrder != null)
                {
                    hashCode = (hashCode * 59) + SortOrder.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EvaluationObjectiveTitle (string) maxLength
            if (EvaluationObjectiveTitle != null && EvaluationObjectiveTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationObjectiveTitle, length must be less than 50.", new[] { "EvaluationObjectiveTitle" });
            }

            // EvaluationObjectiveDescription (string) maxLength
            if (EvaluationObjectiveDescription != null && EvaluationObjectiveDescription.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationObjectiveDescription, length must be less than 255.", new[] { "EvaluationObjectiveDescription" });
            }

            // EvaluationTypeDescriptor (string) maxLength
            if (EvaluationTypeDescriptor != null && EvaluationTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationTypeDescriptor, length must be less than 306.", new[] { "EvaluationTypeDescriptor" });
            }

            yield break;
        }
    }

}
