// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmPerformanceEvaluation
    /// </summary>
    [DataContract(Name = "tpdm_performanceEvaluation")]
    public partial class TpdmPerformanceEvaluation : IEquatable<TpdmPerformanceEvaluation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmPerformanceEvaluation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (required).</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (required).</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (required).</param>
        /// <param name="termDescriptor">The term for the session during the school year. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="academicSubjectDescriptor">The description of the content or subject area of a performance evaluation..</param>
        /// <param name="gradeLevels">An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation..</param>
        /// <param name="performanceEvaluationDescription">The long description of the Performance Evaluation..</param>
        /// <param name="ratingLevels">An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmPerformanceEvaluation(string id = default, string evaluationPeriodDescriptor = default, string performanceEvaluationTitle = default, string performanceEvaluationTypeDescriptor = default, string termDescriptor = default, EdFiEducationOrganizationReference educationOrganizationReference = default, EdFiSchoolYearTypeReference schoolYearTypeReference = default, string academicSubjectDescriptor = default, List<TpdmPerformanceEvaluationGradeLevel> gradeLevels = default, string performanceEvaluationDescription = default, List<TpdmPerformanceEvaluationRatingLevel> ratingLevels = default, string etag = default)
        {
            EvaluationPeriodDescriptor = evaluationPeriodDescriptor ?? throw new ArgumentNullException("evaluationPeriodDescriptor is a required property for TpdmPerformanceEvaluation and cannot be null");
            PerformanceEvaluationTitle = performanceEvaluationTitle ?? throw new ArgumentNullException("performanceEvaluationTitle is a required property for TpdmPerformanceEvaluation and cannot be null");
            PerformanceEvaluationTypeDescriptor = performanceEvaluationTypeDescriptor ?? throw new ArgumentNullException("performanceEvaluationTypeDescriptor is a required property for TpdmPerformanceEvaluation and cannot be null");
            TermDescriptor = termDescriptor ?? throw new ArgumentNullException("termDescriptor is a required property for TpdmPerformanceEvaluation and cannot be null");
            EducationOrganizationReference = educationOrganizationReference ?? throw new ArgumentNullException("educationOrganizationReference is a required property for TpdmPerformanceEvaluation and cannot be null");
            SchoolYearTypeReference = schoolYearTypeReference ?? throw new ArgumentNullException("schoolYearTypeReference is a required property for TpdmPerformanceEvaluation and cannot be null");
            Id = id;
            AcademicSubjectDescriptor = academicSubjectDescriptor;
            GradeLevels = gradeLevels;
            PerformanceEvaluationDescription = performanceEvaluationDescription;
            RatingLevels = ratingLevels;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>
        /// <value>The period for the evaluation.</value>
        [DataMember(Name = "evaluationPeriodDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string EvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        /// <value>An assigned unique identifier for the performance evaluation.</value>
        [DataMember(Name = "performanceEvaluationTitle", IsRequired = true, EmitDefaultValue = false)]
        public string PerformanceEvaluationTitle { get; set; }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>
        /// <value>The type of performance evaluation conducted.</value>
        [DataMember(Name = "performanceEvaluationTypeDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [DataMember(Name = "termDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name = "schoolYearTypeReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// The description of the content or subject area of a performance evaluation.
        /// </summary>
        /// <value>The description of the content or subject area of a performance evaluation.</value>
        [DataMember(Name = "academicSubjectDescriptor", EmitDefaultValue = true)]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation.
        /// </summary>
        /// <value>An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation.</value>
        [DataMember(Name = "gradeLevels", EmitDefaultValue = false)]
        public List<TpdmPerformanceEvaluationGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// The long description of the Performance Evaluation.
        /// </summary>
        /// <value>The long description of the Performance Evaluation.</value>
        [DataMember(Name = "performanceEvaluationDescription", EmitDefaultValue = true)]
        public string PerformanceEvaluationDescription { get; set; }

        /// <summary>
        /// An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation.
        /// </summary>
        /// <value>An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation.</value>
        [DataMember(Name = "ratingLevels", EmitDefaultValue = false)]
        public List<TpdmPerformanceEvaluationRatingLevel> RatingLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmPerformanceEvaluation {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  EvaluationPeriodDescriptor: ").Append(EvaluationPeriodDescriptor).Append("\n");
            _ = sb.Append("  PerformanceEvaluationTitle: ").Append(PerformanceEvaluationTitle).Append("\n");
            _ = sb.Append("  PerformanceEvaluationTypeDescriptor: ").Append(PerformanceEvaluationTypeDescriptor).Append("\n");
            _ = sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            _ = sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            _ = sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            _ = sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            _ = sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            _ = sb.Append("  PerformanceEvaluationDescription: ").Append(PerformanceEvaluationDescription).Append("\n");
            _ = sb.Append("  RatingLevels: ").Append(RatingLevels).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmPerformanceEvaluation);
        }

        /// <summary>
        /// Returns true if TpdmPerformanceEvaluation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmPerformanceEvaluation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmPerformanceEvaluation input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    EvaluationPeriodDescriptor == input.EvaluationPeriodDescriptor ||
                    (EvaluationPeriodDescriptor != null &&
                    EvaluationPeriodDescriptor.Equals(input.EvaluationPeriodDescriptor))
                ) &&
                (
                    PerformanceEvaluationTitle == input.PerformanceEvaluationTitle ||
                    (PerformanceEvaluationTitle != null &&
                    PerformanceEvaluationTitle.Equals(input.PerformanceEvaluationTitle))
                ) &&
                (
                    PerformanceEvaluationTypeDescriptor == input.PerformanceEvaluationTypeDescriptor ||
                    (PerformanceEvaluationTypeDescriptor != null &&
                    PerformanceEvaluationTypeDescriptor.Equals(input.PerformanceEvaluationTypeDescriptor))
                ) &&
                (
                    TermDescriptor == input.TermDescriptor ||
                    (TermDescriptor != null &&
                    TermDescriptor.Equals(input.TermDescriptor))
                ) &&
                (
                    EducationOrganizationReference == input.EducationOrganizationReference ||
                    (EducationOrganizationReference != null &&
                    EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) &&
                (
                    SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (SchoolYearTypeReference != null &&
                    SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) &&
                (
                    AcademicSubjectDescriptor == input.AcademicSubjectDescriptor ||
                    (AcademicSubjectDescriptor != null &&
                    AcademicSubjectDescriptor.Equals(input.AcademicSubjectDescriptor))
                ) &&
                (
                    GradeLevels == input.GradeLevels ||
                    GradeLevels != null &&
                    input.GradeLevels != null &&
                    GradeLevels.SequenceEqual(input.GradeLevels)
                ) &&
                (
                    PerformanceEvaluationDescription == input.PerformanceEvaluationDescription ||
                    (PerformanceEvaluationDescription != null &&
                    PerformanceEvaluationDescription.Equals(input.PerformanceEvaluationDescription))
                ) &&
                (
                    RatingLevels == input.RatingLevels ||
                    RatingLevels != null &&
                    input.RatingLevels != null &&
                    RatingLevels.SequenceEqual(input.RatingLevels)
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                if (EvaluationPeriodDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EvaluationPeriodDescriptor.GetHashCode();
                }
                if (PerformanceEvaluationTitle != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationTitle.GetHashCode();
                }
                if (PerformanceEvaluationTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationTypeDescriptor.GetHashCode();
                }
                if (TermDescriptor != null)
                {
                    hashCode = (hashCode * 59) + TermDescriptor.GetHashCode();
                }
                if (EducationOrganizationReference != null)
                {
                    hashCode = (hashCode * 59) + EducationOrganizationReference.GetHashCode();
                }
                if (SchoolYearTypeReference != null)
                {
                    hashCode = (hashCode * 59) + SchoolYearTypeReference.GetHashCode();
                }
                if (AcademicSubjectDescriptor != null)
                {
                    hashCode = (hashCode * 59) + AcademicSubjectDescriptor.GetHashCode();
                }
                if (GradeLevels != null)
                {
                    hashCode = (hashCode * 59) + GradeLevels.GetHashCode();
                }
                if (PerformanceEvaluationDescription != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationDescription.GetHashCode();
                }
                if (RatingLevels != null)
                {
                    hashCode = (hashCode * 59) + RatingLevels.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EvaluationPeriodDescriptor (string) maxLength
            if (EvaluationPeriodDescriptor != null && EvaluationPeriodDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationPeriodDescriptor, length must be less than 306.", new[] { "EvaluationPeriodDescriptor" });
            }

            // PerformanceEvaluationTitle (string) maxLength
            if (PerformanceEvaluationTitle != null && PerformanceEvaluationTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerformanceEvaluationTitle, length must be less than 50.", new[] { "PerformanceEvaluationTitle" });
            }

            // PerformanceEvaluationTypeDescriptor (string) maxLength
            if (PerformanceEvaluationTypeDescriptor != null && PerformanceEvaluationTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerformanceEvaluationTypeDescriptor, length must be less than 306.", new[] { "PerformanceEvaluationTypeDescriptor" });
            }

            // TermDescriptor (string) maxLength
            if (TermDescriptor != null && TermDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TermDescriptor, length must be less than 306.", new[] { "TermDescriptor" });
            }

            // AcademicSubjectDescriptor (string) maxLength
            if (AcademicSubjectDescriptor != null && AcademicSubjectDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcademicSubjectDescriptor, length must be less than 306.", new[] { "AcademicSubjectDescriptor" });
            }

            // PerformanceEvaluationDescription (string) maxLength
            if (PerformanceEvaluationDescription != null && PerformanceEvaluationDescription.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerformanceEvaluationDescription, length must be less than 255.", new[] { "PerformanceEvaluationDescription" });
            }

            yield break;
        }
    }

}
