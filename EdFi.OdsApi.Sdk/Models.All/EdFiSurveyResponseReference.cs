// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiSurveyResponseReference
    /// </summary>
    [DataContract(Name = "edFi_surveyResponseReference")]
    public partial class EdFiSurveyResponseReference : IEquatable<EdFiSurveyResponseReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponseReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSurveyResponseReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponseReference" /> class.
        /// </summary>
        /// <param name="_namespace">Namespace for the survey. (required).</param>
        /// <param name="surveyIdentifier">The unique survey identifier from the survey tool. (required).</param>
        /// <param name="surveyResponseIdentifier">The identifier of the survey typically from the survey application. (required).</param>
        /// <param name="link">link.</param>
        public EdFiSurveyResponseReference(string _namespace = default(string), string surveyIdentifier = default(string), string surveyResponseIdentifier = default(string), Link link = default(Link))
        {
            // to ensure "_namespace" is required (not null)
            if (_namespace == null)
            {
                throw new ArgumentNullException("_namespace is a required property for EdFiSurveyResponseReference and cannot be null");
            }
            this.Namespace = _namespace;
            // to ensure "surveyIdentifier" is required (not null)
            if (surveyIdentifier == null)
            {
                throw new ArgumentNullException("surveyIdentifier is a required property for EdFiSurveyResponseReference and cannot be null");
            }
            this.SurveyIdentifier = surveyIdentifier;
            // to ensure "surveyResponseIdentifier" is required (not null)
            if (surveyResponseIdentifier == null)
            {
                throw new ArgumentNullException("surveyResponseIdentifier is a required property for EdFiSurveyResponseReference and cannot be null");
            }
            this.SurveyResponseIdentifier = surveyResponseIdentifier;
            this.Link = link;
        }

        /// <summary>
        /// Namespace for the survey.
        /// </summary>
        /// <value>Namespace for the survey.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        /// <value>The unique survey identifier from the survey tool.</value>
        [DataMember(Name = "surveyIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string SurveyIdentifier { get; set; }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        /// <value>The identifier of the survey typically from the survey application.</value>
        [DataMember(Name = "surveyResponseIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string SurveyResponseIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyResponseReference {\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SurveyIdentifier: ").Append(SurveyIdentifier).Append("\n");
            sb.Append("  SurveyResponseIdentifier: ").Append(SurveyResponseIdentifier).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiSurveyResponseReference);
        }

        /// <summary>
        /// Returns true if EdFiSurveyResponseReference instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiSurveyResponseReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiSurveyResponseReference input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) &&
                (
                    this.SurveyIdentifier == input.SurveyIdentifier ||
                    (this.SurveyIdentifier != null &&
                    this.SurveyIdentifier.Equals(input.SurveyIdentifier))
                ) &&
                (
                    this.SurveyResponseIdentifier == input.SurveyResponseIdentifier ||
                    (this.SurveyResponseIdentifier != null &&
                    this.SurveyResponseIdentifier.Equals(input.SurveyResponseIdentifier))
                ) &&
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Namespace != null)
                {
                    hashCode = (hashCode * 59) + this.Namespace.GetHashCode();
                }
                if (this.SurveyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.SurveyIdentifier.GetHashCode();
                }
                if (this.SurveyResponseIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.SurveyResponseIdentifier.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Namespace, length must be less than 255.", new[] { "Namespace" });
            }

            // SurveyIdentifier (string) maxLength
            if (this.SurveyIdentifier != null && this.SurveyIdentifier.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SurveyIdentifier, length must be less than 60.", new[] { "SurveyIdentifier" });
            }

            // SurveyResponseIdentifier (string) maxLength
            if (this.SurveyResponseIdentifier != null && this.SurveyResponseIdentifier.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SurveyResponseIdentifier, length must be less than 60.", new[] { "SurveyResponseIdentifier" });
            }

            yield break;
        }
    }

}
