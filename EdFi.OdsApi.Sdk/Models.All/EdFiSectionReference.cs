// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiSectionReference
    /// </summary>
    [DataContract(Name = "edFi_sectionReference")]
    public partial class EdFiSectionReference : IEquatable<EdFiSectionReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSectionReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiSectionReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSectionReference" /> class.
        /// </summary>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (required).</param>
        /// <param name="schoolId">The identifier assigned to a school. (required).</param>
        /// <param name="schoolYear">The identifier for the school year. (required).</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (required).</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (required).</param>
        /// <param name="link">link.</param>
        public EdFiSectionReference(string localCourseCode = default, int schoolId = default, int schoolYear = default, string sectionIdentifier = default, string sessionName = default, Link link = default)
        {
            LocalCourseCode = localCourseCode ?? throw new ArgumentNullException("localCourseCode is a required property for EdFiSectionReference and cannot be null");
            SchoolId = schoolId;
            SchoolYear = schoolYear;
            SectionIdentifier = sectionIdentifier ?? throw new ArgumentNullException("sectionIdentifier is a required property for EdFiSectionReference and cannot be null");
            SessionName = sessionName ?? throw new ArgumentNullException("sessionName is a required property for EdFiSectionReference and cannot be null");
            Link = link;
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        /// <value>The local code assigned by the School that identifies the course offering provided for the instruction of students.</value>
        [DataMember(Name = "localCourseCode", IsRequired = true, EmitDefaultValue = false)]
        public string LocalCourseCode { get; set; }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        /// <value>The identifier assigned to a school.</value>
        [DataMember(Name = "schoolId", IsRequired = true, EmitDefaultValue = false)]
        public int SchoolId { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        /// <value>The identifier for the school year.</value>
        [DataMember(Name = "schoolYear", IsRequired = true, EmitDefaultValue = false)]
        public int SchoolYear { get; set; }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        /// <value>The local identifier assigned to a section.</value>
        [DataMember(Name = "sectionIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string SectionIdentifier { get; set; }

        /// <summary>
        /// The identifier for the calendar for the academic session.
        /// </summary>
        /// <value>The identifier for the calendar for the academic session.</value>
        [DataMember(Name = "sessionName", IsRequired = true, EmitDefaultValue = false)]
        public string SessionName { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class EdFiSectionReference {\n");
            _ = sb.Append("  LocalCourseCode: ").Append(LocalCourseCode).Append("\n");
            _ = sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            _ = sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            _ = sb.Append("  SectionIdentifier: ").Append(SectionIdentifier).Append("\n");
            _ = sb.Append("  SessionName: ").Append(SessionName).Append("\n");
            _ = sb.Append("  Link: ").Append(Link).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EdFiSectionReference);
        }

        /// <summary>
        /// Returns true if EdFiSectionReference instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiSectionReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiSectionReference input)
        {
            return input != null
&& (
                    LocalCourseCode == input.LocalCourseCode ||
                    (LocalCourseCode != null &&
                    LocalCourseCode.Equals(input.LocalCourseCode))
                ) &&
                (
                    SchoolId == input.SchoolId ||
                    SchoolId.Equals(input.SchoolId)
                ) &&
                (
                    SchoolYear == input.SchoolYear ||
                    SchoolYear.Equals(input.SchoolYear)
                ) &&
                (
                    SectionIdentifier == input.SectionIdentifier ||
                    (SectionIdentifier != null &&
                    SectionIdentifier.Equals(input.SectionIdentifier))
                ) &&
                (
                    SessionName == input.SessionName ||
                    (SessionName != null &&
                    SessionName.Equals(input.SessionName))
                ) &&
                (
                    Link == input.Link ||
                    (Link != null &&
                    Link.Equals(input.Link))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (LocalCourseCode != null)
                {
                    hashCode = (hashCode * 59) + LocalCourseCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + SchoolId.GetHashCode();
                hashCode = (hashCode * 59) + SchoolYear.GetHashCode();
                if (SectionIdentifier != null)
                {
                    hashCode = (hashCode * 59) + SectionIdentifier.GetHashCode();
                }
                if (SessionName != null)
                {
                    hashCode = (hashCode * 59) + SessionName.GetHashCode();
                }
                if (Link != null)
                {
                    hashCode = (hashCode * 59) + Link.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // LocalCourseCode (string) maxLength
            if (LocalCourseCode != null && LocalCourseCode.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocalCourseCode, length must be less than 60.", new[] { "LocalCourseCode" });
            }

            // SectionIdentifier (string) maxLength
            if (SectionIdentifier != null && SectionIdentifier.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SectionIdentifier, length must be less than 255.", new[] { "SectionIdentifier" });
            }

            // SessionName (string) maxLength
            if (SessionName != null && SessionName.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SessionName, length must be less than 60.", new[] { "SessionName" });
            }

            yield break;
        }
    }

}
