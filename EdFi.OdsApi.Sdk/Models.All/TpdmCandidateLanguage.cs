// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmCandidateLanguage
    /// </summary>
    [DataContract(Name = "tpdm_candidateLanguage")]
    public partial class TpdmCandidateLanguage : IEquatable<TpdmCandidateLanguage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateLanguage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCandidateLanguage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateLanguage" /> class.
        /// </summary>
        /// <param name="languageDescriptor">A specification of which written or spoken communication is being used. (required).</param>
        /// <param name="uses">An unordered collection of candidateLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language)..</param>
        public TpdmCandidateLanguage(string languageDescriptor = default, List<TpdmCandidateLanguageUse> uses = default)
        {
            LanguageDescriptor = languageDescriptor ?? throw new ArgumentNullException("languageDescriptor is a required property for TpdmCandidateLanguage and cannot be null");
            Uses = uses;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        /// <value>A specification of which written or spoken communication is being used.</value>
        [DataMember(Name = "languageDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string LanguageDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of candidateLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        /// <value>An unordered collection of candidateLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).</value>
        [DataMember(Name = "uses", EmitDefaultValue = false)]
        public List<TpdmCandidateLanguageUse> Uses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmCandidateLanguage {\n");
            _ = sb.Append("  LanguageDescriptor: ").Append(LanguageDescriptor).Append("\n");
            _ = sb.Append("  Uses: ").Append(Uses).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmCandidateLanguage);
        }

        /// <summary>
        /// Returns true if TpdmCandidateLanguage instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCandidateLanguage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCandidateLanguage input)
        {
            return input != null
&& (
                    LanguageDescriptor == input.LanguageDescriptor ||
                    (LanguageDescriptor != null &&
                    LanguageDescriptor.Equals(input.LanguageDescriptor))
                ) &&
                (
                    Uses == input.Uses ||
                    Uses != null &&
                    input.Uses != null &&
                    Uses.SequenceEqual(input.Uses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (LanguageDescriptor != null)
                {
                    hashCode = (hashCode * 59) + LanguageDescriptor.GetHashCode();
                }
                if (Uses != null)
                {
                    hashCode = (hashCode * 59) + Uses.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // LanguageDescriptor (string) maxLength
            if (LanguageDescriptor != null && LanguageDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageDescriptor, length must be less than 306.", new[] { "LanguageDescriptor" });
            }

            yield break;
        }
    }

}
