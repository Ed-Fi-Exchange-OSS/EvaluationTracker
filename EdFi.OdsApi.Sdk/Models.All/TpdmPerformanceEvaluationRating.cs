// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmPerformanceEvaluationRating
    /// </summary>
    [DataContract(Name = "tpdm_performanceEvaluationRating")]
    public partial class TpdmPerformanceEvaluationRating : IEquatable<TpdmPerformanceEvaluationRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluationRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmPerformanceEvaluationRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluationRating" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="performanceEvaluationReference">performanceEvaluationReference (required).</param>
        /// <param name="personReference">personReference (required).</param>
        /// <param name="actualDate">The month, day, and year on which the performance evaluation was conducted. (required).</param>
        /// <param name="actualDuration">The actual or estimated number of clock minutes during which the performance evaluation was conducted..</param>
        /// <param name="actualTime">An indication of the the time at which the performance evaluation was conducted..</param>
        /// <param name="announced">An indicator of whether the performance evaluation was announced or not..</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured..</param>
        /// <param name="coteachingStyleObservedDescriptor">A type of co-teaching observed as part of the performance evaluation..</param>
        /// <param name="performanceEvaluationRatingLevelDescriptor">The rating level achieved based upon the rating or score..</param>
        /// <param name="results">An unordered collection of performanceEvaluationRatingResults. The numerical summary rating or score for the performance evaluation..</param>
        /// <param name="reviewers">An unordered collection of performanceEvaluationRatingReviewers. The person(s) that conducted the performance evaluation..</param>
        /// <param name="scheduleDate">The month, day, and year on which the performance evaluation was scheduled..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmPerformanceEvaluationRating(string id = default, TpdmPerformanceEvaluationReference performanceEvaluationReference = default, EdFiPersonReference personReference = default, DateTime actualDate = default, int? actualDuration = default, string actualTime = default, bool? announced = default, string comments = default, string coteachingStyleObservedDescriptor = default, string performanceEvaluationRatingLevelDescriptor = default, List<TpdmPerformanceEvaluationRatingResult> results = default, List<TpdmPerformanceEvaluationRatingReviewer> reviewers = default, DateTime? scheduleDate = default, string etag = default)
        {
            PerformanceEvaluationReference = performanceEvaluationReference ?? throw new ArgumentNullException("performanceEvaluationReference is a required property for TpdmPerformanceEvaluationRating and cannot be null");
            PersonReference = personReference ?? throw new ArgumentNullException("personReference is a required property for TpdmPerformanceEvaluationRating and cannot be null");
            ActualDate = actualDate;
            Id = id;
            ActualDuration = actualDuration;
            ActualTime = actualTime;
            Announced = announced;
            Comments = comments;
            CoteachingStyleObservedDescriptor = coteachingStyleObservedDescriptor;
            PerformanceEvaluationRatingLevelDescriptor = performanceEvaluationRatingLevelDescriptor;
            Results = results;
            Reviewers = reviewers;
            ScheduleDate = scheduleDate;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceEvaluationReference
        /// </summary>
        [DataMember(Name = "performanceEvaluationReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmPerformanceEvaluationReference PerformanceEvaluationReference { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name = "personReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// The month, day, and year on which the performance evaluation was conducted.
        /// </summary>
        /// <value>The month, day, and year on which the performance evaluation was conducted.</value>
        [DataMember(Name = "actualDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ActualDate { get; set; }

        /// <summary>
        /// The actual or estimated number of clock minutes during which the performance evaluation was conducted.
        /// </summary>
        /// <value>The actual or estimated number of clock minutes during which the performance evaluation was conducted.</value>
        [DataMember(Name = "actualDuration", EmitDefaultValue = true)]
        public int? ActualDuration { get; set; }

        /// <summary>
        /// An indication of the the time at which the performance evaluation was conducted.
        /// </summary>
        /// <value>An indication of the the time at which the performance evaluation was conducted.</value>
        [DataMember(Name = "actualTime", EmitDefaultValue = true)]
        public string ActualTime { get; set; }

        /// <summary>
        /// An indicator of whether the performance evaluation was announced or not.
        /// </summary>
        /// <value>An indicator of whether the performance evaluation was announced or not.</value>
        [DataMember(Name = "announced", EmitDefaultValue = true)]
        public bool? Announced { get; set; }

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        /// <value>Any comments about the performance evaluation to be captured.</value>
        [DataMember(Name = "comments", EmitDefaultValue = true)]
        public string Comments { get; set; }

        /// <summary>
        /// A type of co-teaching observed as part of the performance evaluation.
        /// </summary>
        /// <value>A type of co-teaching observed as part of the performance evaluation.</value>
        [DataMember(Name = "coteachingStyleObservedDescriptor", EmitDefaultValue = true)]
        public string CoteachingStyleObservedDescriptor { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        /// <value>The rating level achieved based upon the rating or score.</value>
        [DataMember(Name = "performanceEvaluationRatingLevelDescriptor", EmitDefaultValue = true)]
        public string PerformanceEvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of performanceEvaluationRatingResults. The numerical summary rating or score for the performance evaluation.
        /// </summary>
        /// <value>An unordered collection of performanceEvaluationRatingResults. The numerical summary rating or score for the performance evaluation.</value>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<TpdmPerformanceEvaluationRatingResult> Results { get; set; }

        /// <summary>
        /// An unordered collection of performanceEvaluationRatingReviewers. The person(s) that conducted the performance evaluation.
        /// </summary>
        /// <value>An unordered collection of performanceEvaluationRatingReviewers. The person(s) that conducted the performance evaluation.</value>
        [DataMember(Name = "reviewers", EmitDefaultValue = false)]
        public List<TpdmPerformanceEvaluationRatingReviewer> Reviewers { get; set; }

        /// <summary>
        /// The month, day, and year on which the performance evaluation was scheduled.
        /// </summary>
        /// <value>The month, day, and year on which the performance evaluation was scheduled.</value>
        [DataMember(Name = "scheduleDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ScheduleDate { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmPerformanceEvaluationRating {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  PerformanceEvaluationReference: ").Append(PerformanceEvaluationReference).Append("\n");
            _ = sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            _ = sb.Append("  ActualDate: ").Append(ActualDate).Append("\n");
            _ = sb.Append("  ActualDuration: ").Append(ActualDuration).Append("\n");
            _ = sb.Append("  ActualTime: ").Append(ActualTime).Append("\n");
            _ = sb.Append("  Announced: ").Append(Announced).Append("\n");
            _ = sb.Append("  Comments: ").Append(Comments).Append("\n");
            _ = sb.Append("  CoteachingStyleObservedDescriptor: ").Append(CoteachingStyleObservedDescriptor).Append("\n");
            _ = sb.Append("  PerformanceEvaluationRatingLevelDescriptor: ").Append(PerformanceEvaluationRatingLevelDescriptor).Append("\n");
            _ = sb.Append("  Results: ").Append(Results).Append("\n");
            _ = sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            _ = sb.Append("  ScheduleDate: ").Append(ScheduleDate).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmPerformanceEvaluationRating);
        }

        /// <summary>
        /// Returns true if TpdmPerformanceEvaluationRating instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmPerformanceEvaluationRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmPerformanceEvaluationRating input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    PerformanceEvaluationReference == input.PerformanceEvaluationReference ||
                    (PerformanceEvaluationReference != null &&
                    PerformanceEvaluationReference.Equals(input.PerformanceEvaluationReference))
                ) &&
                (
                    PersonReference == input.PersonReference ||
                    (PersonReference != null &&
                    PersonReference.Equals(input.PersonReference))
                ) &&
                (
                    ActualDate == input.ActualDate ||
                    ActualDate.Equals(input.ActualDate)
                ) &&
                (
                    ActualDuration == input.ActualDuration ||
                    (ActualDuration != null &&
                    ActualDuration.Equals(input.ActualDuration))
                ) &&
                (
                    ActualTime == input.ActualTime ||
                    (ActualTime != null &&
                    ActualTime.Equals(input.ActualTime))
                ) &&
                (
                    Announced == input.Announced ||
                    (Announced != null &&
                    Announced.Equals(input.Announced))
                ) &&
                (
                    Comments == input.Comments ||
                    (Comments != null &&
                    Comments.Equals(input.Comments))
                ) &&
                (
                    CoteachingStyleObservedDescriptor == input.CoteachingStyleObservedDescriptor ||
                    (CoteachingStyleObservedDescriptor != null &&
                    CoteachingStyleObservedDescriptor.Equals(input.CoteachingStyleObservedDescriptor))
                ) &&
                (
                    PerformanceEvaluationRatingLevelDescriptor == input.PerformanceEvaluationRatingLevelDescriptor ||
                    (PerformanceEvaluationRatingLevelDescriptor != null &&
                    PerformanceEvaluationRatingLevelDescriptor.Equals(input.PerformanceEvaluationRatingLevelDescriptor))
                ) &&
                (
                    Results == input.Results ||
                    Results != null &&
                    input.Results != null &&
                    Results.SequenceEqual(input.Results)
                ) &&
                (
                    Reviewers == input.Reviewers ||
                    Reviewers != null &&
                    input.Reviewers != null &&
                    Reviewers.SequenceEqual(input.Reviewers)
                ) &&
                (
                    ScheduleDate == input.ScheduleDate ||
                    (ScheduleDate != null &&
                    ScheduleDate.Equals(input.ScheduleDate))
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                if (PerformanceEvaluationReference != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationReference.GetHashCode();
                }
                if (PersonReference != null)
                {
                    hashCode = (hashCode * 59) + PersonReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + ActualDate.GetHashCode();
                if (ActualDuration != null)
                {
                    hashCode = (hashCode * 59) + ActualDuration.GetHashCode();
                }
                if (ActualTime != null)
                {
                    hashCode = (hashCode * 59) + ActualTime.GetHashCode();
                }
                if (Announced != null)
                {
                    hashCode = (hashCode * 59) + Announced.GetHashCode();
                }
                if (Comments != null)
                {
                    hashCode = (hashCode * 59) + Comments.GetHashCode();
                }
                if (CoteachingStyleObservedDescriptor != null)
                {
                    hashCode = (hashCode * 59) + CoteachingStyleObservedDescriptor.GetHashCode();
                }
                if (PerformanceEvaluationRatingLevelDescriptor != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationRatingLevelDescriptor.GetHashCode();
                }
                if (Results != null)
                {
                    hashCode = (hashCode * 59) + Results.GetHashCode();
                }
                if (Reviewers != null)
                {
                    hashCode = (hashCode * 59) + Reviewers.GetHashCode();
                }
                if (ScheduleDate != null)
                {
                    hashCode = (hashCode * 59) + ScheduleDate.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Comments (string) maxLength
            if (Comments != null && Comments.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 1024.", new[] { "Comments" });
            }

            // CoteachingStyleObservedDescriptor (string) maxLength
            if (CoteachingStyleObservedDescriptor != null && CoteachingStyleObservedDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoteachingStyleObservedDescriptor, length must be less than 306.", new[] { "CoteachingStyleObservedDescriptor" });
            }

            // PerformanceEvaluationRatingLevelDescriptor (string) maxLength
            if (PerformanceEvaluationRatingLevelDescriptor != null && PerformanceEvaluationRatingLevelDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerformanceEvaluationRatingLevelDescriptor, length must be less than 306.", new[] { "PerformanceEvaluationRatingLevelDescriptor" });
            }

            yield break;
        }
    }

}
