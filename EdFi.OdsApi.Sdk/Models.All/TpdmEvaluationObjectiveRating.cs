// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmEvaluationObjectiveRating
    /// </summary>
    [DataContract(Name = "tpdm_evaluationObjectiveRating")]
    public partial class TpdmEvaluationObjectiveRating : IEquatable<TpdmEvaluationObjectiveRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationObjectiveRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmEvaluationObjectiveRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationObjectiveRating" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationObjectiveReference">evaluationObjectiveReference (required).</param>
        /// <param name="evaluationRatingReference">evaluationRatingReference (required).</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured..</param>
        /// <param name="objectiveRatingLevelDescriptor">The rating level achieved based upon the rating or score..</param>
        /// <param name="results">An unordered collection of evaluationObjectiveRatingResults. The numerical summary rating or score for the evaluation Objective..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmEvaluationObjectiveRating(string id = default, TpdmEvaluationObjectiveReference evaluationObjectiveReference = default, TpdmEvaluationRatingReference evaluationRatingReference = default, string comments = default, string objectiveRatingLevelDescriptor = default, List<TpdmEvaluationObjectiveRatingResult> results = default, string etag = default)
        {
            EvaluationObjectiveReference = evaluationObjectiveReference ?? throw new ArgumentNullException("evaluationObjectiveReference is a required property for TpdmEvaluationObjectiveRating and cannot be null");
            EvaluationRatingReference = evaluationRatingReference ?? throw new ArgumentNullException("evaluationRatingReference is a required property for TpdmEvaluationObjectiveRating and cannot be null");
            Id = id;
            Comments = comments;
            ObjectiveRatingLevelDescriptor = objectiveRatingLevelDescriptor;
            Results = results;
            Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationObjectiveReference
        /// </summary>
        [DataMember(Name = "evaluationObjectiveReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmEvaluationObjectiveReference EvaluationObjectiveReference { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationRatingReference
        /// </summary>
        [DataMember(Name = "evaluationRatingReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmEvaluationRatingReference EvaluationRatingReference { get; set; }

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        /// <value>Any comments about the performance evaluation to be captured.</value>
        [DataMember(Name = "comments", EmitDefaultValue = true)]
        public string Comments { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        /// <value>The rating level achieved based upon the rating or score.</value>
        [DataMember(Name = "objectiveRatingLevelDescriptor", EmitDefaultValue = true)]
        public string ObjectiveRatingLevelDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of evaluationObjectiveRatingResults. The numerical summary rating or score for the evaluation Objective.
        /// </summary>
        /// <value>An unordered collection of evaluationObjectiveRatingResults. The numerical summary rating or score for the evaluation Objective.</value>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<TpdmEvaluationObjectiveRatingResult> Results { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmEvaluationObjectiveRating {\n");
            _ = sb.Append("  Id: ").Append(Id).Append("\n");
            _ = sb.Append("  EvaluationObjectiveReference: ").Append(EvaluationObjectiveReference).Append("\n");
            _ = sb.Append("  EvaluationRatingReference: ").Append(EvaluationRatingReference).Append("\n");
            _ = sb.Append("  Comments: ").Append(Comments).Append("\n");
            _ = sb.Append("  ObjectiveRatingLevelDescriptor: ").Append(ObjectiveRatingLevelDescriptor).Append("\n");
            _ = sb.Append("  Results: ").Append(Results).Append("\n");
            _ = sb.Append("  Etag: ").Append(Etag).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmEvaluationObjectiveRating);
        }

        /// <summary>
        /// Returns true if TpdmEvaluationObjectiveRating instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEvaluationObjectiveRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEvaluationObjectiveRating input)
        {
            return input != null
&& (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    EvaluationObjectiveReference == input.EvaluationObjectiveReference ||
                    (EvaluationObjectiveReference != null &&
                    EvaluationObjectiveReference.Equals(input.EvaluationObjectiveReference))
                ) &&
                (
                    EvaluationRatingReference == input.EvaluationRatingReference ||
                    (EvaluationRatingReference != null &&
                    EvaluationRatingReference.Equals(input.EvaluationRatingReference))
                ) &&
                (
                    Comments == input.Comments ||
                    (Comments != null &&
                    Comments.Equals(input.Comments))
                ) &&
                (
                    ObjectiveRatingLevelDescriptor == input.ObjectiveRatingLevelDescriptor ||
                    (ObjectiveRatingLevelDescriptor != null &&
                    ObjectiveRatingLevelDescriptor.Equals(input.ObjectiveRatingLevelDescriptor))
                ) &&
                (
                    Results == input.Results ||
                    Results != null &&
                    input.Results != null &&
                    Results.SequenceEqual(input.Results)
                ) &&
                (
                    Etag == input.Etag ||
                    (Etag != null &&
                    Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = (hashCode * 59) + Id.GetHashCode();
                }
                if (EvaluationObjectiveReference != null)
                {
                    hashCode = (hashCode * 59) + EvaluationObjectiveReference.GetHashCode();
                }
                if (EvaluationRatingReference != null)
                {
                    hashCode = (hashCode * 59) + EvaluationRatingReference.GetHashCode();
                }
                if (Comments != null)
                {
                    hashCode = (hashCode * 59) + Comments.GetHashCode();
                }
                if (ObjectiveRatingLevelDescriptor != null)
                {
                    hashCode = (hashCode * 59) + ObjectiveRatingLevelDescriptor.GetHashCode();
                }
                if (Results != null)
                {
                    hashCode = (hashCode * 59) + Results.GetHashCode();
                }
                if (Etag != null)
                {
                    hashCode = (hashCode * 59) + Etag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Comments (string) maxLength
            if (Comments != null && Comments.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 1024.", new[] { "Comments" });
            }

            // ObjectiveRatingLevelDescriptor (string) maxLength
            if (ObjectiveRatingLevelDescriptor != null && ObjectiveRatingLevelDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ObjectiveRatingLevelDescriptor, length must be less than 306.", new[] { "ObjectiveRatingLevelDescriptor" });
            }

            yield break;
        }
    }

}
