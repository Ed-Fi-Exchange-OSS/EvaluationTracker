// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// TpdmEvaluationObjectiveReference
    /// </summary>
    [DataContract(Name = "tpdm_evaluationObjectiveReference")]
    public partial class TpdmEvaluationObjectiveReference : IEquatable<TpdmEvaluationObjectiveReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationObjectiveReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmEvaluationObjectiveReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationObjectiveReference" /> class.
        /// </summary>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (required).</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (required).</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation. (required).</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (required).</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (required).</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type of performance evaluation conducted. (required).</param>
        /// <param name="schoolYear">The identifier for the school year. (required).</param>
        /// <param name="termDescriptor">The term for the session during the school year. (required).</param>
        /// <param name="link">link.</param>
        public TpdmEvaluationObjectiveReference(int educationOrganizationId = default, string evaluationObjectiveTitle = default, string evaluationPeriodDescriptor = default, string evaluationTitle = default, string performanceEvaluationTitle = default, string performanceEvaluationTypeDescriptor = default, int schoolYear = default, string termDescriptor = default, Link link = default)
        {
            EducationOrganizationId = educationOrganizationId;
            EvaluationObjectiveTitle = evaluationObjectiveTitle ?? throw new ArgumentNullException("evaluationObjectiveTitle is a required property for TpdmEvaluationObjectiveReference and cannot be null");
            EvaluationPeriodDescriptor = evaluationPeriodDescriptor ?? throw new ArgumentNullException("evaluationPeriodDescriptor is a required property for TpdmEvaluationObjectiveReference and cannot be null");
            EvaluationTitle = evaluationTitle ?? throw new ArgumentNullException("evaluationTitle is a required property for TpdmEvaluationObjectiveReference and cannot be null");
            PerformanceEvaluationTitle = performanceEvaluationTitle ?? throw new ArgumentNullException("performanceEvaluationTitle is a required property for TpdmEvaluationObjectiveReference and cannot be null");
            PerformanceEvaluationTypeDescriptor = performanceEvaluationTypeDescriptor ?? throw new ArgumentNullException("performanceEvaluationTypeDescriptor is a required property for TpdmEvaluationObjectiveReference and cannot be null");
            SchoolYear = schoolYear;
            TermDescriptor = termDescriptor ?? throw new ArgumentNullException("termDescriptor is a required property for TpdmEvaluationObjectiveReference and cannot be null");
            Link = link;
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [DataMember(Name = "educationOrganizationId", IsRequired = true, EmitDefaultValue = false)]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        /// <value>The name or title of the evaluation Objective.</value>
        [DataMember(Name = "evaluationObjectiveTitle", IsRequired = true, EmitDefaultValue = false)]
        public string EvaluationObjectiveTitle { get; set; }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>
        /// <value>The period for the evaluation.</value>
        [DataMember(Name = "evaluationPeriodDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string EvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        /// <value>The name or title of the evaluation.</value>
        [DataMember(Name = "evaluationTitle", IsRequired = true, EmitDefaultValue = false)]
        public string EvaluationTitle { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        /// <value>An assigned unique identifier for the performance evaluation.</value>
        [DataMember(Name = "performanceEvaluationTitle", IsRequired = true, EmitDefaultValue = false)]
        public string PerformanceEvaluationTitle { get; set; }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>
        /// <value>The type of performance evaluation conducted.</value>
        [DataMember(Name = "performanceEvaluationTypeDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        /// <value>The identifier for the school year.</value>
        [DataMember(Name = "schoolYear", IsRequired = true, EmitDefaultValue = false)]
        public int SchoolYear { get; set; }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [DataMember(Name = "termDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            _ = sb.Append("class TpdmEvaluationObjectiveReference {\n");
            _ = sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            _ = sb.Append("  EvaluationObjectiveTitle: ").Append(EvaluationObjectiveTitle).Append("\n");
            _ = sb.Append("  EvaluationPeriodDescriptor: ").Append(EvaluationPeriodDescriptor).Append("\n");
            _ = sb.Append("  EvaluationTitle: ").Append(EvaluationTitle).Append("\n");
            _ = sb.Append("  PerformanceEvaluationTitle: ").Append(PerformanceEvaluationTitle).Append("\n");
            _ = sb.Append("  PerformanceEvaluationTypeDescriptor: ").Append(PerformanceEvaluationTypeDescriptor).Append("\n");
            _ = sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            _ = sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            _ = sb.Append("  Link: ").Append(Link).Append("\n");
            _ = sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TpdmEvaluationObjectiveReference);
        }

        /// <summary>
        /// Returns true if TpdmEvaluationObjectiveReference instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEvaluationObjectiveReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEvaluationObjectiveReference input)
        {
            return input != null
&& (
                    EducationOrganizationId == input.EducationOrganizationId ||
                    EducationOrganizationId.Equals(input.EducationOrganizationId)
                ) &&
                (
                    EvaluationObjectiveTitle == input.EvaluationObjectiveTitle ||
                    (EvaluationObjectiveTitle != null &&
                    EvaluationObjectiveTitle.Equals(input.EvaluationObjectiveTitle))
                ) &&
                (
                    EvaluationPeriodDescriptor == input.EvaluationPeriodDescriptor ||
                    (EvaluationPeriodDescriptor != null &&
                    EvaluationPeriodDescriptor.Equals(input.EvaluationPeriodDescriptor))
                ) &&
                (
                    EvaluationTitle == input.EvaluationTitle ||
                    (EvaluationTitle != null &&
                    EvaluationTitle.Equals(input.EvaluationTitle))
                ) &&
                (
                    PerformanceEvaluationTitle == input.PerformanceEvaluationTitle ||
                    (PerformanceEvaluationTitle != null &&
                    PerformanceEvaluationTitle.Equals(input.PerformanceEvaluationTitle))
                ) &&
                (
                    PerformanceEvaluationTypeDescriptor == input.PerformanceEvaluationTypeDescriptor ||
                    (PerformanceEvaluationTypeDescriptor != null &&
                    PerformanceEvaluationTypeDescriptor.Equals(input.PerformanceEvaluationTypeDescriptor))
                ) &&
                (
                    SchoolYear == input.SchoolYear ||
                    SchoolYear.Equals(input.SchoolYear)
                ) &&
                (
                    TermDescriptor == input.TermDescriptor ||
                    (TermDescriptor != null &&
                    TermDescriptor.Equals(input.TermDescriptor))
                ) &&
                (
                    Link == input.Link ||
                    (Link != null &&
                    Link.Equals(input.Link))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = (hashCode * 59) + EducationOrganizationId.GetHashCode();
                if (EvaluationObjectiveTitle != null)
                {
                    hashCode = (hashCode * 59) + EvaluationObjectiveTitle.GetHashCode();
                }
                if (EvaluationPeriodDescriptor != null)
                {
                    hashCode = (hashCode * 59) + EvaluationPeriodDescriptor.GetHashCode();
                }
                if (EvaluationTitle != null)
                {
                    hashCode = (hashCode * 59) + EvaluationTitle.GetHashCode();
                }
                if (PerformanceEvaluationTitle != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationTitle.GetHashCode();
                }
                if (PerformanceEvaluationTypeDescriptor != null)
                {
                    hashCode = (hashCode * 59) + PerformanceEvaluationTypeDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + SchoolYear.GetHashCode();
                if (TermDescriptor != null)
                {
                    hashCode = (hashCode * 59) + TermDescriptor.GetHashCode();
                }
                if (Link != null)
                {
                    hashCode = (hashCode * 59) + Link.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EvaluationObjectiveTitle (string) maxLength
            if (EvaluationObjectiveTitle != null && EvaluationObjectiveTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationObjectiveTitle, length must be less than 50.", new[] { "EvaluationObjectiveTitle" });
            }

            // EvaluationPeriodDescriptor (string) maxLength
            if (EvaluationPeriodDescriptor != null && EvaluationPeriodDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationPeriodDescriptor, length must be less than 306.", new[] { "EvaluationPeriodDescriptor" });
            }

            // EvaluationTitle (string) maxLength
            if (EvaluationTitle != null && EvaluationTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvaluationTitle, length must be less than 50.", new[] { "EvaluationTitle" });
            }

            // PerformanceEvaluationTitle (string) maxLength
            if (PerformanceEvaluationTitle != null && PerformanceEvaluationTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerformanceEvaluationTitle, length must be less than 50.", new[] { "PerformanceEvaluationTitle" });
            }

            // PerformanceEvaluationTypeDescriptor (string) maxLength
            if (PerformanceEvaluationTypeDescriptor != null && PerformanceEvaluationTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerformanceEvaluationTypeDescriptor, length must be less than 306.", new[] { "PerformanceEvaluationTypeDescriptor" });
            }

            // TermDescriptor (string) maxLength
            if (TermDescriptor != null && TermDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TermDescriptor, length must be less than 306.", new[] { "TermDescriptor" });
            }

            yield break;
        }
    }

}
